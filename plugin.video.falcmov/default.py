import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
#------------------------------------------------------------
# Sourced From Online Templates, Guides & Github
#------------------------------------------------------------
# License: GPL (http://www.gnu.org/licenses/gpl-3.0.html)
# Based on code from which Many Addons Use!
#
# Author:    Merlin
#------------------------------------------------------------
if 64 - 64: i11iIiiIii
import urllib
import urllib2
import datetime
import shutil
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib
import base64
from addon . common . net import Net
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
import requests
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = xbmcgui . Dialog ( )
if 78 - 78: i11i . oOooOoO0Oo0O
if 10 - 10: IIiI1I11i11
ooOO00oOo = {
 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
 }
if 92 - 92: O0O / oo000 % IiIi11iIIi1Ii / o0OOO - iiiiIi11i . Ii1I
IiiIII111iI = [ 'alldebrid.com' , 'allmyvideos.net' , 'allvid.ch' , 'auengine.com' , 'beststreams.net' , 'briskfile.com' , 'castamp.com' , 'clicknupload.com' , 'clicknupload.me' , 'clicknupload.link' , 'cloudy.ec' , 'cloudzilla.to' , 'neodrive.co' , 'crunchyroll.com' , 'daclips.in' , 'daclips.com' , 'dailymotion.com' , 'divxstage.eu' , 'divxstage.net' , 'divxstage.to' , 'couldtime.to' , 'ecostream.tv' , 'exashare.com' , 'facebook.com' , 'fastplay.sx' , 'filehoot.com' , 'filenuke.com' , 'filepup.net' , 'filmshowonline.net' , 'flashx.tv' , 'plus.google.com' , 'googlevideo.com' , 'picasaweb.google.com' , 'googleusercontent.com' , 'googledrive.com' , 'gorillavid.in' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'idowatch.net' , 'indavideo.hu' , 'ishared.eu' , 'jetload.tv' , 'kingfiles.net' , 'letwatch.us' , 'letwatch.to' , 'vidshare.us' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'api.video.mail.ru' , 'mega-debrid.eu' , 'megamp4.net' , 'mersalaayitten.com' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movshare.net' , 'wholecloud.net' , 'mp4engine.com' , 'mp4stream.com' , 'mp4upload.com' , 'myvidstream.net' , 'nosvideo.com' , 'noslocker.com' , 'auroravid.to' , 'novamov.com' , 'nowvideo.sx' , 'nowvideo.eu' , 'nowvideo.ch' , 'nowvideo.sx' , 'nowvideo.co' , 'nowvideo.li' , 'nowvideo.ec' , 'nowvideo.at' , 'nowvideo.fo' , 'ok.ru' , 'odnoklassniki.ru' , 'openload.io' , 'openload.co' , 'play44.net' , 'played.to' , 'playhd.video' , 'playhd.fo' , 'playu.net' , 'playu.me' , 'playwire.com' , 'Premiumize.me' , 'primeshare.tv' , 'promptfile.com' , 'purevid.com' , 'rapidvideo.ws' , 'rapidvideo.com' , 'api.real-debrid.com' , 'premium.rpnet.biz' , 'rutube.ru' , 'shared2.me' , 'shared.sx' , 'sharerepo.com' , 'sharesix.com' , 'simply-debrid.com' , 'speedplay.xyz' , 'speedplay.us' , 'speedplay3.pw' , 'speedvideo.net' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'teramixer.com' , 'thevideo.me' , 'thevideos.tv' , 'toltsd-fel.tk' , 'trollvid.net' , 'tune.pk' , 'tusfiles.net' , 'twitch.tv' , 'up2stream.com' , 'upload.af' , 'uploadc.com' , 'uploadc.ch' , 'zalaa.com' , 'uploadx.org' , 'uptobox.com' , 'uptostream.com' , 'userfiles.com' , 'userscloud.com' , 'veehd.com' , 'veoh.com' , 'vid.ag' , 'vidbull.com' , 'vidcrazy.net' , 'uploadcrazy.net' , 'thevideobee.to' , 'videoboxer.co' , 'vidgg.to' , 'vid.gg' , 'videohut.to' , 'videomega.tv' , 'videoraj.to' , 'videorev.cc' , 'videosky.to' , 'video.tt' , 'videoweed.es' , 'bitvid.sx' , 'videoweed.com' , 'videowood.tv' , 'byzoo.org' , 'playpanda.net' , 'videozoo.me' , 'videowing.me' , 'videowing.me' , 'easyvideo.me' , 'play44.net' , 'playbb.me' , 'video44.net' , 'vidio.sx' , 'vid.me' , 'vidspot.net' , 'vidto.me' , 'vidup.me' , 'vidup.org' , 'vidzi.tv' , 'vimeo.com' , 'vivo.sx' , 'vk.com' , 'vkpass.com' , 'vodlocker.com' , 'vshare.io' , 'vshare.eu' , 'watchers.to' , 'watchonline.to' , 'watchvideo.us' , 'watchvideo2.us' , 'watchvideo3.us' , 'watchvideo4.us' , 'watchvideo5.us' , 'watchvideo6.us' , 'watchvideo7.us' , 'watchvideo8.us' , 'watchvideo9.us' , 'weshare.me' , 'xvidstage.com' , 'youlol.biz' , 'shitmovie.com' , 'yourupload.com' , 'youtube.com' , 'youtu.be' , 'youwatch.org' , 'api.zevera.com' , 'zettahost.tv' , 'zstream.to' ]
if 34 - 34: iii1I1I / O00oOoOoO0o0O . O0oo0OO0 + Oo0ooO0oo0oO . I1i1iI1i - II
Oo = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 27 - 27: Oo0ooO0oo0oO * OoooooooOO + iii1I1I * II - i11iIiiIii - O0oo0OO0
class IiiiIiI1iIiI1 ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 85 - 85: O0O
iIi1IIii11I = 'aHR0cDovL2FqYnVpbGRzLnVrL2ZhbGNvbi9ob21lLnhtbA==' . decode ( 'base64' )
if 84 - 84: iIii1I11I1II1 . Oo0ooO0oo0oO / Oo0ooO0oo0oO % Oo0ooO0oo0oO
i11 = xbmcaddon . Addon ( 'plugin.video.falcmov' )
I11 = i11 . getAddonInfo ( 'version' )
Oo0o0000o0o0 = xbmc . translatePath ( i11 . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
oOo0oooo00o = xbmc . translatePath ( i11 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
oO0o0o0ooO0oO = os . path . join ( Oo0o0000o0o0 , 'favorites' )
oo0o0O00 = os . path . join ( Oo0o0000o0o0 , 'history' )
if 68 - 68: Ii1I . oOooOoO0Oo0O / O0oo0OO0
oOOoo = os . path . join ( Oo0o0000o0o0 , 'list_revision' )
I1IiIiiIII = os . path . join ( oOo0oooo00o , 'icon.png' )
iI11 = os . path . join ( oOo0oooo00o , 'fanart.jpg' )
iII111ii = os . path . join ( Oo0o0000o0o0 , 'source_file' )
i1iIIi1 = Oo0o0000o0o0
if 50 - 50: i11iIiiIii - O00oOoOoO0o0O
downloader = downloader . SimpleDownloader ( )
oo0Ooo0 = i11 . getSetting ( 'debug' )
if os . path . exists ( oO0o0o0ooO0oO ) == True :
 I1I11I1I1I = open ( oO0o0o0ooO0oO ) . read ( )
else : I1I11I1I1I = [ ]
if os . path . exists ( iII111ii ) == True :
 OooO0OO = open ( iII111ii ) . read ( )
else : OooO0OO = [ ]
if 28 - 28: i11i
if 28 - 28: iIii1I11I1II1 - i1IIi
def OO ( string ) :
 if oo0Ooo0 == 'true' :
  xbmc . log ( "[addon.live.projectm]: %s" % ( I11 , string ) )
  if 55 - 55: O0O / o0OOO * Ii1I
  if 86 - 86: i11iIiiIii + O00oOoOoO0o0O + II * iii1I1I + IiIi11iIIi1Ii
def oOoO ( url , headers = None ) :
 try :
  headers = { 'User-agent' : 'MyAgent' }
  oOo = urllib2 . Request ( url , None , headers )
  oOoOoO = urllib2 . urlopen ( oOo )
  ii1I = oOoOoO . read ( )
  oOoOoO . close ( )
  return ii1I
 except urllib2 . URLError , OooO0 :
  OO ( 'URL: ' + url )
  if hasattr ( OooO0 , 'code' ) :
   OO ( 'We failed with error code - %s.' % OooO0 . code )
   xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,We failed with error code - " + str ( OooO0 . code ) + ",10000," + I1IiIiiIII + ")" )
  elif hasattr ( OooO0 , 'reason' ) :
   OO ( 'We failed to reach a server.' )
   OO ( 'Reason: %s' % OooO0 . reason )
   xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,We failed to reach a server. - " + str ( OooO0 . reason ) + ",10000," + I1IiIiiIII + ")" )
   if 35 - 35: Ii1I % I1i1iI1i % i11iIiiIii / OoooooooOO
   if 13 - 13: i1IIi - O00oOoOoO0o0O % iiiiIi11i / iIii1I11I1II1 % O0oo0OO0
def oo ( ) :
 OO ( "CPIndex" )
 O0o0Oo ( iIi1IIii11I , '' )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 78 - 78: iIii1I11I1II1 - O00oOoOoO0o0O * O0O + IiIi11iIIi1Ii + O0oo0OO0 + O0oo0OO0
def I11I11i1I ( url ) :
 oOo = urllib2 . Request ( url )
 oOo . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 oOoOoO = ''
 ii11i1iIII = ''
 try :
  oOoOoO = urllib2 . urlopen ( oOo )
  ii11i1iIII = oOoOoO . read ( )
  oOoOoO . close ( )
 except : pass
 if ii11i1iIII != '' :
  return ii11i1iIII
 else :
  ii11i1iIII = 'Opened'
  return ii11i1iIII
  if 3 - 3: i1IIi / oOooOoO0Oo0O % iii1I1I * i11iIiiIii / O0 * iii1I1I
def III1ii1iII ( ) :
 if os . path . exists ( oO0o0o0ooO0oO ) == True :
  oo0oooooO0 ( 'Favorites' , 'url' , 4 , os . path . join ( oOo0oooo00o , 'resources' , 'favorite.png' ) , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "browse_xml_database" ) == "true" :
  oo0oooooO0 ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "browse_community" ) == "true" :
  oo0oooooO0 ( 'Community Files' , 'community_files' , 16 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if os . path . exists ( oo0o0O00 ) == True :
  oo0oooooO0 ( 'Search History' , 'history' , 25 , os . path . join ( oOo0oooo00o , 'resources' , 'favorite.png' ) , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "searchyt" ) == "true" :
  oo0oooooO0 ( 'Search:Youtube' , 'youtube' , 25 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "searchDM" ) == "true" :
  oo0oooooO0 ( 'Search:dailymotion' , 'dmotion' , 25 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "PulsarM" ) == "true" :
  oo0oooooO0 ( 'Pulsar:IMDB' , 'IMDBidplay' , 27 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if os . path . exists ( iII111ii ) == True :
  i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
  if 23 - 23: IiIi11iIIi1Ii . i11i
  if len ( i11Iiii ) > 1 :
   for Oo0O0OOOoo in i11Iiii :
    if 95 - 95: O0O % iiiiIi11i . O0
    if isinstance ( Oo0O0OOOoo , list ) :
     oo0oooooO0 ( Oo0O0OOOoo [ 0 ] . encode ( 'utf-8' ) , Oo0O0OOOoo [ 1 ] . encode ( 'utf-8' ) , 1 , I1IiIiiIII , iI11 , '' , '' , '' , '' , 'source' )
    else :
     I1i1I = I1IiIiiIII
     oOO00oOO = iI11
     OoOo = ''
     iI = ''
     credits = ''
     o00O = ''
     if Oo0O0OOOoo . has_key ( 'thumbnail' ) :
      I1i1I = Oo0O0OOOoo [ 'thumbnail' ]
     if Oo0O0OOOoo . has_key ( 'fanart' ) :
      oOO00oOO = Oo0O0OOOoo [ 'fanart' ]
     if Oo0O0OOOoo . has_key ( 'description' ) :
      OoOo = Oo0O0OOOoo [ 'description' ]
     if Oo0O0OOOoo . has_key ( 'date' ) :
      iI = Oo0O0OOOoo [ 'date' ]
     if Oo0O0OOOoo . has_key ( 'genre' ) :
      o00O = Oo0O0OOOoo [ 'genre' ]
     if Oo0O0OOOoo . has_key ( 'credits' ) :
      credits = Oo0O0OOOoo [ 'credits' ]
     oo0oooooO0 ( Oo0O0OOOoo [ 'title' ] . encode ( 'utf-8' ) , Oo0O0OOOoo [ 'url' ] . encode ( 'utf-8' ) , 1 , I1i1I , oOO00oOO , OoOo , o00O , iI , credits , 'source' )
     if 69 - 69: iiiiIi11i % I1i1iI1i - IiIi11iIIi1Ii + I1i1iI1i - O0 % OoooooooOO
  else :
   if len ( i11Iiii ) == 1 :
    if isinstance ( i11Iiii [ 0 ] , list ) :
     O0o0Oo ( i11Iiii [ 0 ] [ 1 ] . encode ( 'utf-8' ) , iI11 )
    else :
     O0o0Oo ( i11Iiii [ 0 ] [ 'url' ] , i11Iiii [ 0 ] [ 'fanart' ] )
     if 31 - 31: i11i - Ii1I . I1i1iI1i % oo000 - O0
     if 4 - 4: i11i / II . O0oo0OO0
def O0oo0OO0oOOOo ( url = None ) :
 if url is None :
  if not i11 . getSetting ( "new_file_source" ) == "" :
   i1i1i11IIi = i11 . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not i11 . getSetting ( "new_url_source" ) == "" :
   i1i1i11IIi = i11 . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  i1i1i11IIi = url
 if i1i1i11IIi == '' or i1i1i11IIi is None :
  return
 OO ( 'Adding New Source: ' + i1i1i11IIi . encode ( 'utf-8' ) )
 if 33 - 33: IiIi11iIIi1Ii + Ii1I * O0O - IIiI1I11i11 / iiiiIi11i % O00oOoOoO0o0O
 II1i1IiiIIi11 = None
 if 47 - 47: O0oo0OO0
 ii1I = Ii11iII1 ( i1i1i11IIi )
 print 'source_url' , i1i1i11IIi
 if isinstance ( ii1I , BeautifulSOAP ) :
  if ii1I . find ( 'channels_info' ) :
   II1i1IiiIIi11 = ii1I . channels_info
  elif ii1I . find ( 'items_info' ) :
   II1i1IiiIIi11 = ii1I . items_info
 if II1i1IiiIIi11 :
  Oo0O0O0ooO0O = { }
  Oo0O0O0ooO0O [ 'url' ] = i1i1i11IIi
  try : Oo0O0O0ooO0O [ 'title' ] = II1i1IiiIIi11 . title . string
  except : pass
  try : Oo0O0O0ooO0O [ 'thumbnail' ] = II1i1IiiIIi11 . thumbnail . string
  except : pass
  try : Oo0O0O0ooO0O [ 'fanart' ] = II1i1IiiIIi11 . fanart . string
  except : pass
  try : Oo0O0O0ooO0O [ 'genre' ] = II1i1IiiIIi11 . genre . string
  except : pass
  try : Oo0O0O0ooO0O [ 'description' ] = II1i1IiiIIi11 . description . string
  except : pass
  try : Oo0O0O0ooO0O [ 'date' ] = II1i1IiiIIi11 . date . string
  except : pass
  try : Oo0O0O0ooO0O [ 'credits' ] = II1i1IiiIIi11 . credits . string
  except : pass
 else :
  if '/' in i1i1i11IIi :
   IIIIii = i1i1i11IIi . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in i1i1i11IIi :
   IIIIii = i1i1i11IIi . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in IIIIii :
   IIIIii = urllib . unquote_plus ( IIIIii )
  O0o0 = xbmc . Keyboard ( IIIIii , 'Displayed Name, Rename?' )
  O0o0 . doModal ( )
  if ( O0o0 . isConfirmed ( ) == False ) :
   return
  OO00Oo = O0o0 . getText ( )
  if len ( OO00Oo ) == 0 :
   return
  Oo0O0O0ooO0O = { }
  Oo0O0O0ooO0O [ 'title' ] = OO00Oo
  Oo0O0O0ooO0O [ 'url' ] = i1i1i11IIi
  Oo0O0O0ooO0O [ 'fanart' ] = oOO00oOO
  if 51 - 51: Oo0ooO0oo0oO * IiIi11iIIi1Ii + iii1I1I + O0O
 if os . path . exists ( iII111ii ) == False :
  o0O0O00 = [ ]
  o0O0O00 . append ( Oo0O0O0ooO0O )
  o000o = open ( iII111ii , "w" )
  o000o . write ( json . dumps ( o0O0O00 ) )
  o000o . close ( )
 else :
  i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
  i11Iiii . append ( Oo0O0O0ooO0O )
  o000o = open ( iII111ii , "w" )
  o000o . write ( json . dumps ( i11Iiii ) )
  o000o . close ( )
 i11 . setSetting ( 'new_url_source' , "" )
 i11 . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,New source added.,5000," + I1IiIiiIII + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : i11 . openSettings ( )
 if 7 - 7: II * O0O % iiiiIi11i . Oo0ooO0oo0oO
def Ii1iIiII1ii1 ( url ) :
 ooOooo000oOO = xbmcgui . Dialog ( )
 Oo0oOOo = ooOooo000oOO . input ( 'Search' , type = xbmcgui . INPUT_ALPHANUM )
 Oo0OoO00oOO0o = Oo0oOOo . lower ( )
 if Oo0OoO00oOO0o == '' :
  pass
 else :
  OOO00O ( Oo0OoO00oOO0o , url )
  if 84 - 84: iiiiIi11i * O0O / iii1I1I - O0
def OOO00O ( Search_name , url ) :
 IiI1 = I11I11i1I ( url )
 if IiI1 != 'Failed' :
  Oo0O00Oo0o0 = re . compile ( '<channel>.+?<name>(.+?)</name>.+?<thumbnail>(.+?)</thumbnail>.+?<externallink>(.+?)</externallink>.+?<fanart>(.+?)</fanart>.+?</channel>' , re . DOTALL ) . findall ( IiI1 )
  for O00O0oOO00O00 , i1 , url , oOO00oOO in Oo0O00Oo0o0 :
   if not 'http:' in url :
    pass
   else :
    OOO00O ( Search_name , url )
  Oo00 = re . compile ( '<title>(.+?)</title>.+?<link>(.+?)</link>.+?<thumbnail>(.+?)</thumbnail>.+?<fanart>(.+?)</fanart>' , re . DOTALL ) . findall ( IiI1 )
  for O00O0oOO00O00 , url , i1 , oOO00oOO in Oo00 :
   if 'http:' in url :
    if Search_name . lower ( ) in O00O0oOO00O00 . lower ( ) :
     i1i ( url , O00O0oOO00O00 , i1 , oOO00oOO , '' , '' , '' , '' , None , '' , 1 )
     if 50 - 50: Oo0ooO0oo0oO
     if 14 - 14: iii1I1I % O0O * iii1I1I
def iII ( name ) :
 i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
 for oO00o0 in range ( len ( i11Iiii ) ) :
  if isinstance ( i11Iiii [ oO00o0 ] , list ) :
   if i11Iiii [ oO00o0 ] [ 0 ] == name :
    del i11Iiii [ oO00o0 ]
    o000o = open ( iII111ii , "w" )
    o000o . write ( json . dumps ( i11Iiii ) )
    o000o . close ( )
    break
  else :
   if i11Iiii [ oO00o0 ] [ 'title' ] == name :
    del i11Iiii [ oO00o0 ]
    o000o = open ( iII111ii , "w" )
    o000o . write ( json . dumps ( i11Iiii ) )
    o000o . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 55 - 55: IIiI1I11i11 + iIii1I11I1II1 / oo000 * iiiiIi11i - i11iIiiIii - O00oOoOoO0o0O
 if 25 - 25: o0OOO
 if 7 - 7: i1IIi / oOooOoO0Oo0O * I1i1iI1i . Oo0ooO0oo0oO . iIii1I11I1II1
def iIii ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 ooo0O = BeautifulSoup ( oOoO ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for Oo0O0OOOoo in ooo0O ( 'a' ) :
  oOoO0o00OO0 = Oo0O0OOOoo [ 'href' ]
  if not oOoO0o00OO0 . startswith ( '?' ) :
   O00O0oOO00O00 = Oo0O0OOOoo . string
   if O00O0oOO00O00 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if oOoO0o00OO0 . endswith ( '/' ) :
     if browse :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 15 , I1IiIiiIII , oOO00oOO , '' , '' , '' )
     else :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 14 , I1IiIiiIII , oOO00oOO , '' , '' , '' )
    elif oOoO0o00OO0 . endswith ( '.xml' ) :
     if browse :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 1 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( iII111ii ) == True :
       if O00O0oOO00O00 in OooO0OO :
        oo0oooooO0 ( O00O0oOO00O00 + ' (in use)' , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
       else :
        oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
      else :
       oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
       if 7 - 7: Ii1I + I1i1iI1i + O0
       if 9 - 9: i11i . IiIi11iIIi1Ii - II / IiIi11iIIi1Ii
def I11OoOoOOOoOO ( browse = False ) :
 ii1ii11IIIiiI = 'http://community-links.googlecode.com/svn/trunk/'
 ooo0O = BeautifulSoup ( oOoO ( ii1ii11IIIiiI ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 O00OOOoOoo0O = ooo0O ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for Oo0O0OOOoo in O00OOOoOoo0O :
  O00O0oOO00O00 = Oo0O0OOOoo ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI + O00O0oOO00O00 , 1 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
  else :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI + O00O0oOO00O00 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
   if 77 - 77: O0oo0OO0 % O0oo0OO0 * iiiiIi11i - i11iIiiIii
   if 93 - 93: OoooooooOO / oOooOoO0Oo0O % i11iIiiIii + o0OOO * O0O
def Ii11iII1 ( url , data = None ) :
 print 'getsoup' , url , data
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  data = oOoO ( url )
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   print 'found m3u data' , data
   return data
   if 15 - 15: iii1I1I . O0O / IIiI1I11i11 + iii1I1I
 elif data == None :
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    Ooo = xbmcvfs . copy ( url , os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) )
    if Ooo :
     data = open ( os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) )
    else :
     OO ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     print 'found m3u data' , data
     return data
  else :
   OO ( "Soup Data not found!" )
   return
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 62 - 62: Ii1I / O0O + O00oOoOoO0o0O / O0O . i11i
 if 68 - 68: i11iIiiIii % o0OOO + i11iIiiIii
def O0o0Oo ( url , fanart ) :
 print 'url-getData' , url
 iii = "List"
 if 1 - 1: IIiI1I11i11 / IiIi11iIIi1Ii % O0oo0OO0 * Oo0ooO0oo0oO . i11iIiiIii
 ooo0O = Ii11iII1 ( url )
 if 2 - 2: o0OOO * iii1I1I - iIii1I11I1II1 + oOooOoO0Oo0O . iiiiIi11i % O0oo0OO0
 if isinstance ( ooo0O , BeautifulSOAP ) :
  if len ( ooo0O ( 'layoutype' ) ) > 0 :
   iii = "Thumbnail"
   if 92 - 92: O0oo0OO0
  if len ( ooo0O ( 'channels' ) ) > 0 :
   IIiIiiIi = ooo0O ( 'channel' )
   for O000oo in IIiIiiIi :
    if 20 - 20: Ii1I % O00oOoOoO0o0O / O00oOoOoO0o0O + O00oOoOoO0o0O
    if 45 - 45: iiiiIi11i - Oo0ooO0oo0oO - OoooooooOO - O0O . i11i / O0
    oo0o00O = ''
    o00O0OoO = 0
    try :
     oo0o00O = O000oo ( 'externallink' ) [ 0 ] . string
     o00O0OoO = len ( O000oo ( 'externallink' ) )
    except : pass
    if 16 - 16: iIii1I11I1II1
    if o00O0OoO > 1 : oo0o00O = ''
    if 90 - 90: IiIi11iIIi1Ii % i1IIi / O0O
    O00O0oOO00O00 = O000oo ( 'name' ) [ 0 ] . string
    IIi = O000oo ( 'thumbnail' ) [ 0 ] . string
    if IIi == None :
     IIi = ''
     if 41 - 41: O00oOoOoO0o0O - O0 - O0
    try :
     if not O000oo ( 'fanart' ) :
      if i11 . getSetting ( 'use_thumb' ) == "true" :
       oO00OOoO00 = IIi
      else :
       oO00OOoO00 = fanart
     else :
      oO00OOoO00 = O000oo ( 'fanart' ) [ 0 ] . string
     if oO00OOoO00 == None :
      raise
    except :
     oO00OOoO00 = fanart
     if 40 - 40: oOooOoO0Oo0O * O00oOoOoO0o0O + Ii1I % O0oo0OO0
    try :
     OoOo = O000oo ( 'info' ) [ 0 ] . string
     if OoOo == None :
      raise
    except :
     OoOo = ''
     if 74 - 74: iiiiIi11i - IIiI1I11i11 + OoooooooOO + I1i1iI1i / oo000
    try :
     o00O = O000oo ( 'genre' ) [ 0 ] . string
     if o00O == None :
      raise
    except :
     o00O = ''
     if 23 - 23: O0
    try :
     iI = O000oo ( 'date' ) [ 0 ] . string
     if iI == None :
      raise
    except :
     iI = ''
     if 85 - 85: O00oOoOoO0o0O
    try :
     credits = O000oo ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 84 - 84: oOooOoO0Oo0O . iIii1I11I1II1 % OoooooooOO + O00oOoOoO0o0O % OoooooooOO % O0O
    try :
     if oo0o00O == '' :
      oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , IIi , oO00OOoO00 , OoOo , o00O , iI , credits , True )
     else :
      if 42 - 42: O0O / iii1I1I / IiIi11iIIi1Ii + O0oo0OO0 / oo000
      oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , oo0o00O . encode ( 'utf-8' ) , 1 , IIi , oO00OOoO00 , OoOo , o00O , iI , None , 'source' )
    except :
     OO ( 'There was a problem adding directory from getData(): ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
  else :
   OO ( 'No Channels: getItems' )
   o0OoOO000ooO0 ( ooo0O ( 'item' ) , fanart )
 else :
  o0o0o0oO0oOO ( ooo0O )
  if 3 - 3: IiIi11iIIi1Ii
 if iii == "Thumbnail" :
  Ii11I1 ( )
  if 14 - 14: Ii1I % iIii1I11I1II1
  if 71 - 71: O0 . O0oo0OO0 / IiIi11iIIi1Ii
  if 73 - 73: i11i . i11iIiiIii / O00oOoOoO0o0O + oo000
  if 12 - 12: i11iIiiIii - i1IIi - O0O . i1IIi - Ii1I + O0
  if 98 - 98: IiIi11iIIi1Ii
def o0o0o0oO0oOO ( data ) :
 OOOO0oo0 = data . rstrip ( )
 Oo0O00Oo0o0 = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( OOOO0oo0 )
 I11iiI1i1 = len ( Oo0O00Oo0o0 )
 print 'total m3u links' , I11iiI1i1
 for I1i1Iiiii , OOo0oO00ooO00 , oOO0O00oO0Ooo in Oo0O00Oo0o0 :
  if 'tvg-logo' in I1i1Iiiii :
   IIi = oO0Oo0O0o ( I1i1Iiiii , 'tvg-logo=[\'"](.*?)[\'"]' )
   if IIi :
    if IIi . startswith ( 'http' ) :
     IIi = IIi
     if 99 - 99: iiiiIi11i . O0oo0OO0 + II % iiiiIi11i . i11iIiiIii % O0
    elif not i11 . getSetting ( 'logo-folderPath' ) == "" :
     oOO00O = i11 . getSetting ( 'logo-folderPath' )
     IIi = oOO00O + IIi
     if 77 - 77: IIiI1I11i11 - i1IIi - iii1I1I . oo000
    else :
     IIi = IIi
     if 39 - 39: i11i / II + I1i1iI1i / oo000
     if 13 - 13: Oo0ooO0oo0oO + O0 + O0oo0OO0 % oOooOoO0Oo0O / IiIi11iIIi1Ii . Oo0ooO0oo0oO
  else :
   IIi = ''
  if 'type' in I1i1Iiiii :
   OO0Oooo0oOO0O = oO0Oo0O0o ( I1i1Iiiii , 'type=[\'"](.*?)[\'"]' )
   if OO0Oooo0oOO0O == 'yt-dl' :
    oOO0O00oO0Ooo = oOO0O00oO0Ooo + "&mode=18"
   elif OO0Oooo0oOO0O == 'regex' :
    ii1ii11IIIiiI = oOO0O00oO0Ooo . split ( '&regexs=' )
    if 62 - 62: oOooOoO0Oo0O
    O00o0OO0 = IIi1I1iiiii ( Ii11iII1 ( '' , data = ii1ii11IIIiiI [ 1 ] ) )
    if 71 - 71: Oo0ooO0oo0oO * i11i * iiiiIi11i
    i1i ( ii1ii11IIIiiI [ 0 ] , OOo0oO00ooO00 , IIi , '' , '' , '' , '' , '' , None , O00o0OO0 , I11iiI1i1 )
    continue
  i1i ( oOO0O00oO0Ooo , OOo0oO00ooO00 , IIi , '' , '' , '' , '' , '' , None , '' , I11iiI1i1 )
  if 56 - 56: oOooOoO0Oo0O
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 54 - 54: I1i1iI1i / Ii1I . iiiiIi11i % O0oo0OO0
def OoO0OOOOo0O ( name , url , fanart ) :
 ooo0O = Ii11iII1 ( url )
 OooOO = ooo0O . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 I1111 = OooOO ( 'item' )
 try :
  oO00OOoO00 = OooOO ( 'fanart' ) [ 0 ] . string
  if oO00OOoO00 == None :
   raise
 except :
  oO00OOoO00 = fanart
 for O000oo in OooOO ( 'subchannel' ) :
  name = O000oo ( 'name' ) [ 0 ] . string
  try :
   IIi = O000oo ( 'thumbnail' ) [ 0 ] . string
   if IIi == None :
    raise
  except :
   IIi = ''
  try :
   if not O000oo ( 'fanart' ) :
    if i11 . getSetting ( 'use_thumb' ) == "true" :
     oO00OOoO00 = IIi
   else :
    oO00OOoO00 = O000oo ( 'fanart' ) [ 0 ] . string
   if oO00OOoO00 == None :
    raise
  except :
   pass
  try :
   OoOo = O000oo ( 'info' ) [ 0 ] . string
   if OoOo == None :
    raise
  except :
   OoOo = ''
   if 14 - 14: oOooOoO0Oo0O - i11i + i1IIi
  try :
   o00O = O000oo ( 'genre' ) [ 0 ] . string
   if o00O == None :
    raise
  except :
   o00O = ''
   if 10 - 10: iiiiIi11i + i1IIi
  try :
   iI = O000oo ( 'date' ) [ 0 ] . string
   if iI == None :
    raise
  except :
   iI = ''
   if 87 - 87: oOooOoO0Oo0O
  try :
   credits = O000oo ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 58 - 58: oo000 % IiIi11iIIi1Ii
  try :
   oo0oooooO0 ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , IIi , oO00OOoO00 , OoOo , o00O , credits , iI )
  except :
   OO ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 o0OoOO000ooO0 ( I1111 , oO00OOoO00 )
 if 50 - 50: I1i1iI1i . IiIi11iIIi1Ii
 if 97 - 97: O0 + oo000
def OO0O000 ( name , url , fanart ) :
 ooo0O = Ii11iII1 ( url )
 OooOO = ooo0O . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 I1111 = OooOO ( 'subitem' )
 o0OoOO000ooO0 ( I1111 , fanart )
 if 37 - 37: OoooooooOO - O0 - IiIi11iIIi1Ii
 if 77 - 77: Ii1I * iIii1I11I1II1
 if 98 - 98: oOooOoO0Oo0O % O00oOoOoO0o0O * OoooooooOO
def OoiIIiIi1 ( name , url , iconimage , fanart ) :
 o0O0o0 = [ ] ; II111iI111I1I = [ ] ; I1i1i1iii = 0
 I1111i = iIIii ( url , 'sublink:' , '#' )
 for o00O0O in I1111i :
  if 'LISTSOURCE:' in o00O0O :
   ii1iii1i = Iii1I1111ii ( o00O0O , 'LISTSOURCE:' , '::' )
   ooOoO00 = Iii1I1111ii ( o00O0O , 'LISTNAME:' , '::' )
  else :
   ii1iii1i = o00O0O . replace ( 'sublink:' , '' ) . replace ( '#' , '' )
   ooOoO00 = name
  if len ( ii1iii1i ) > 10 :
   I1i1i1iii = I1i1i1iii + 1 ; o0O0o0 . append ( ooOoO00 ) ; II111iI111I1I . append ( ii1iii1i )
   if 14 - 14: i1IIi - IiIi11iIIi1Ii % O0 - O0O
 if I1i1i1iii == 1 :
  try :
   ooO0O00Oo0o = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage ) ; ooO0O00Oo0o . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
   OOO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = II111iI111I1I [ 0 ] , listitem = ooO0O00Oo0o )
   xbmc . Player ( ) . play ( Oo0o00OO0000 ( II111iI111I1I [ 0 ] ) , ooO0O00Oo0o )
  except :
   pass
 else :
  o0OO00 = xbmcgui . Dialog ( )
  I1i = o0OO00 . select ( 'Falcon Movies - Select A Source' , o0O0o0 )
  if I1i >= 0 :
   O00Oooo = str ( o0O0o0 [ I1i ] )
   i11I = str ( II111iI111I1I [ I1i ] )
   if 76 - 76: Oo0ooO0oo0oO * O0oo0OO0
   try :
    ooO0O00Oo0o = xbmcgui . ListItem ( O00Oooo , iconImage = iconimage , thumbnailImage = iconimage ) ; ooO0O00Oo0o . setInfo ( type = "Video" , infoLabels = { "Title" : O00Oooo } )
    OOO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = i11I , listitem = ooO0O00Oo0o )
    xbmc . Player ( ) . play ( Oo0o00OO0000 ( i11I ) , ooO0O00Oo0o )
   except :
    pass
    if 52 - 52: Ii1I
    if 19 - 19: oOooOoO0Oo0O
    if 25 - 25: O00oOoOoO0o0O / II
def IIooO ( text , pattern ) :
 Ooo0oOooo0 = ""
 try :
  oOOOoo00 = re . findall ( pattern , text , flags = re . DOTALL )
  Ooo0oOooo0 = oOOOoo00 [ 0 ]
 except :
  Ooo0oOooo0 = ""
  if 9 - 9: O0 % O0 - IiIi11iIIi1Ii
 return Ooo0oOooo0
 if 51 - 51: oOooOoO0Oo0O . iIii1I11I1II1 - o0OOO / O0
def iIIii ( text , start_with , end_with ) :
 OOOoO00 = re . findall ( "(?i)(" + start_with + "[\S\s]+?" + end_with + ")" , text )
 return OOOoO00
 if 40 - 40: o0OOO % oOooOoO0Oo0O . II . O0 * I1i1iI1i
def Iii1I1111ii ( text , from_string , to_string , excluding = True ) :
 if excluding :
  try : OOOoO00 = re . search ( "(?i)" + from_string + "([\S\s]+?)" + to_string , text ) . group ( 1 )
  except : OOOoO00 = ''
 else :
  try : OOOoO00 = re . search ( "(?i)(" + from_string + "[\S\s]+?" + to_string + ")" , text ) . group ( 1 )
  except : OOOoO00 = ''
 return OOOoO00
 if 4 - 4: O00oOoOoO0o0O % iiiiIi11i * O0O
def o0OoOO000ooO0 ( items , fanart ) :
 I11iiI1i1 = len ( items )
 print 'START GET ITEMS *****'
 OO ( 'Total Items: %s' % I11iiI1i1 )
 for o0O0OOOOoOO0 in items :
  ii = False
  O0oOo00o = False
  try :
   O00O0oOO00O00 = o0O0OOOOoOO0 ( 'title' ) [ 0 ] . string
   if O00O0oOO00O00 is None :
    O00O0oOO00O00 = 'unknown?'
  except :
   OO ( 'Name Error' )
   O00O0oOO00O00 = ''
   if 81 - 81: Oo0ooO0oo0oO % i1IIi . iIii1I11I1II1
   if 4 - 4: i11iIiiIii % O0O % i1IIi / Oo0ooO0oo0oO
  try :
   if o0O0OOOOoOO0 ( 'epg' ) :
    if o0O0OOOOoOO0 . epg_url :
     OO ( 'Get EPG Regex' )
     I11iI = o0O0OOOOoOO0 . epg_url . string
     ooOoo = o0O0OOOOoOO0 . epg_regex . string
     I1III1111iIi = I1i111I ( I11iI , ooOoo )
     if I1III1111iIi :
      O00O0oOO00O00 += ' - ' + I1III1111iIi
    elif o0O0OOOOoOO0 ( 'epg' ) [ 0 ] . string > 1 :
     O00O0oOO00O00 += OooOo0oo0O0o00O ( o0O0OOOOoOO0 ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   OO ( 'EPG Error' )
  try :
   ii1ii11IIIiiI = [ ]
   if len ( o0O0OOOOoOO0 ( 'link' ) ) > 0 :
    if 48 - 48: II / I1i1iI1i . iIii1I11I1II1 * oo000 * iiiiIi11i / i1IIi
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'link' ) :
     if not Oo0O0OOOoo . string == None :
      ii1ii11IIIiiI . append ( Oo0O0OOOoo . string )
      if 92 - 92: IIiI1I11i11 % IIiI1I11i11 - IiIi11iIIi1Ii / oo000
   elif len ( o0O0OOOOoOO0 ( 'sportsdevil' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'sportsdevil' ) :
     if not Oo0O0OOOoo . string == None :
      I11IIIi = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + Oo0O0OOOoo . string
      iIIiiI1II1i11 = o0O0OOOOoOO0 ( 'referer' ) [ 0 ] . string
      if iIIiiI1II1i11 :
       if 65 - 65: O00oOoOoO0o0O / iii1I1I / oo000
       I11IIIi = I11IIIi + '%26referer=' + iIIiiI1II1i11
      ii1ii11IIIiiI . append ( I11IIIi )
   elif len ( o0O0OOOOoOO0 ( 'p2p' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'p2p' ) :
     if not Oo0O0OOOoo . string == None :
      if 'sop://' in Oo0O0OOOoo :
       Ooo0000O0 = 'plugin://plugin.video.p2p-streams/?url=' + Oo0O0OOOoo . string + '&amp;mode=2&amp;' + 'name=' + O00O0oOO00O00
       ii1ii11IIIiiI . append ( Ooo0000O0 )
      else :
       IIIIIIiIiIi1 = 'plugin://plugin.video.p2p-streams/?url=' + Oo0O0OOOoo . string + '&amp;mode=1&amp;' + 'name=' + O00O0oOO00O00
       ii1ii11IIIiiI . append ( IIIIIIiIiIi1 )
   elif len ( o0O0OOOOoOO0 ( 'vaughn' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'vaughn' ) :
     if not Oo0O0OOOoo . string == None :
      I11iiiiI1i = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + Oo0O0OOOoo . string
      ii1ii11IIIiiI . append ( I11iiiiI1i )
   elif len ( o0O0OOOOoOO0 ( 'ilive' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'ilive' ) :
     if not Oo0O0OOOoo . string == None :
      if not 'http' in Oo0O0OOOoo . string :
       iI1i11 = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + Oo0O0OOOoo . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       iI1i11 = 'plugin://plugin.video.tbh.ilive/?url=' + Oo0O0OOOoo . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( o0O0OOOOoOO0 ( 'yt-dl' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'yt-dl' ) :
     if not Oo0O0OOOoo . string == None :
      OoOOoooOO0O = Oo0O0OOOoo . string + '&mode=18'
      ii1ii11IIIiiI . append ( OoOOoooOO0O )
   elif len ( o0O0OOOOoOO0 ( 'utube' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'utube' ) :
     if not Oo0O0OOOoo . string == None :
      if len ( Oo0O0OOOoo . string ) == 11 :
       ooo00Ooo = 'plugin://plugin.video.youtube/play/?video_id=' + Oo0O0OOOoo . string
      elif Oo0O0OOOoo . string . startswith ( 'PL' ) and not '&order=' in Oo0O0OOOoo . string :
       ooo00Ooo = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + Oo0O0OOOoo . string
      else :
       ooo00Ooo = 'plugin://plugin.video.youtube/play/?playlist_id=' + Oo0O0OOOoo . string
    ii1ii11IIIiiI . append ( ooo00Ooo )
   elif len ( o0O0OOOOoOO0 ( 'imdb' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'imdb' ) :
     if not Oo0O0OOOoo . string == None :
      if i11 . getSetting ( 'genesisorpulsar' ) == '0' :
       Oo0o0O00 = 'plugin://plugin.video.genesis/?action=play&imdb=' + Oo0O0OOOoo . string
      else :
       Oo0o0O00 = 'plugin://plugin.video.pulsar/movie/tt' + Oo0O0OOOoo . string + '/play'
      ii1ii11IIIiiI . append ( Oo0o0O00 )
   elif len ( o0O0OOOOoOO0 ( 'f4m' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'f4m' ) :
     if not Oo0O0OOOoo . string == None :
      if '.f4m' in Oo0O0OOOoo . string :
       ii1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string )
      elif '.m3u8' in Oo0O0OOOoo . string :
       ii1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string ) + '&amp;streamtype=HLS'
       if 39 - 39: O00oOoOoO0o0O / II . IiIi11iIIi1Ii % O0 * O0oo0OO0 + oOooOoO0Oo0O
      else :
       ii1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string ) + '&amp;streamtype=SIMPLE'
    ii1ii11IIIiiI . append ( ii1 )
   elif len ( o0O0OOOOoOO0 ( 'ftv' ) ) > 0 :
    for Oo0O0OOOoo in o0O0OOOOoOO0 ( 'ftv' ) :
     if not Oo0O0OOOoo . string == None :
      O0oo0O = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( O00O0oOO00O00 ) + '&url=' + Oo0O0OOOoo . string + '&mode=125&ch_fanart=na'
     ii1ii11IIIiiI . append ( O0oo0O )
   if len ( ii1ii11IIIiiI ) < 1 :
    raise
  except :
   OO ( 'Error <link> element, Passing:' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
   continue
   if 36 - 36: Ii1I + O0 - O00oOoOoO0o0O - O0 % iii1I1I . iiiiIi11i
  ii = False
  if 74 - 74: i11iIiiIii . oOooOoO0Oo0O
  try :
   ii = o0O0OOOOoOO0 ( 'externallink' ) [ 0 ] . string
  except : pass
  if 36 - 36: OoooooooOO . O0O
  if ii :
   oO = [ ii ]
   ii = True
  else :
   ii = False
  try :
   O0oOo00o = o0O0OOOOoOO0 ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if O0oOo00o :
   oO = [ O0oOo00o ]
   O0oOo00o = True
  else :
   O0oOo00o = False
  try :
   IIi = o0O0OOOOoOO0 ( 'thumbnail' ) [ 0 ] . string
   if IIi == None :
    raise
  except :
   IIi = ''
  try :
   if not o0O0OOOOoOO0 ( 'fanart' ) :
    if i11 . getSetting ( 'use_thumb' ) == "true" :
     oO00OOoO00 = IIi
    else :
     oO00OOoO00 = fanart
   else :
    oO00OOoO00 = o0O0OOOOoOO0 ( 'fanart' ) [ 0 ] . string
   if oO00OOoO00 == None :
    raise
  except :
   oO00OOoO00 = fanart
  try :
   OoOo = o0O0OOOOoOO0 ( 'info' ) [ 0 ] . string
   if OoOo == None :
    raise
  except :
   OoOo = ''
   if 10 - 10: IIiI1I11i11 / IIiI1I11i11 / I1i1iI1i . I1i1iI1i
  try :
   o00O = o0O0OOOOoOO0 ( 'genre' ) [ 0 ] . string
   if o00O == None :
    raise
  except :
   o00O = ''
   if 98 - 98: IIiI1I11i11 / oOooOoO0Oo0O . O0 + O0O
  try :
   iI = o0O0OOOOoOO0 ( 'date' ) [ 0 ] . string
   if iI == None :
    raise
  except :
   iI = ''
   if 43 - 43: i11i . iiiiIi11i / o0OOO
  O00o0OO0 = None
  if o0O0OOOOoOO0 ( 'regex' ) :
   try :
    i1iI1 = o0O0OOOOoOO0 ( 'regex' )
    O00o0OO0 = IIi1I1iiiii ( i1iI1 )
   except :
    pass
    if 33 - 33: Oo0ooO0oo0oO % iIii1I11I1II1 * oOooOoO0Oo0O
  try :
   if len ( ii1ii11IIIiiI ) > 1 :
    if 95 - 95: II / II
    IIiI1Ii = 0
    O0O0O0Oo = [ ]
    for Oo0O0OOOoo in ii1ii11IIIiiI :
     if i11 . getSetting ( 'ask_playlist_items' ) == 'true' :
      if O00o0OO0 :
       O0O0O0Oo . append ( Oo0O0OOOoo + '&regexs=' + O00o0OO0 )
      elif any ( x in Oo0O0OOOoo for x in IiiIII111iI ) and Oo0O0OOOoo . startswith ( 'http' ) :
       O0O0O0Oo . append ( Oo0O0OOOoo + '&mode=19' )
     else :
      O0O0O0Oo . append ( Oo0O0OOOoo )
    if i11 . getSetting ( 'add_playlist' ) == "false" :
     for Oo0O0OOOoo in ii1ii11IIIiiI :
      IIiI1Ii += 1
      print 'ADDLINK 1'
      i1i ( Oo0O0OOOoo , '%s) %s' % ( IIiI1Ii , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) ) , IIi , oO00OOoO00 , OoOo , o00O , iI , True , O0O0O0Oo , O00o0OO0 , I11iiI1i1 )
    else :
     i1i ( '' , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , IIi , oO00OOoO00 , OoOo , o00O , iI , True , O0O0O0Oo , O00o0OO0 , I11iiI1i1 )
   else :
    if ii :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , oO [ 0 ] . encode ( 'utf-8' ) , 1 , IIi , fanart , OoOo , o00O , iI , None , 'source' )
    elif O0oOo00o :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , oO [ 0 ] , 53 , IIi , fanart , OoOo , o00O , iI , None , 'source' )
    elif ii1ii11IIIiiI [ 0 ] . find ( 'sublink' ) > 0 :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , ii1ii11IIIiiI [ 0 ] , 30 , IIi , oO00OOoO00 , OoOo , O00o0OO0 , '' , '' , '' )
     if 70 - 70: O0O % iiiiIi11i + Ii1I / O00oOoOoO0o0O % O0
    else :
     i1i ( ii1ii11IIIiiI [ 0 ] , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , IIi , oO00OOoO00 , OoOo , o00O , iI , True , None , O00o0OO0 , I11iiI1i1 )
     if 100 - 100: IiIi11iIIi1Ii + Ii1I * IiIi11iIIi1Ii
     if 80 - 80: IiIi11iIIi1Ii * O0 - O00oOoOoO0o0O
  except :
   OO ( 'There was a problem adding item - ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
 print 'FINISH GET ITEMS *****'
 if 66 - 66: i11iIiiIii - Ii1I * IIiI1I11i11
def IIi1I1iiiii ( reg_item ) :
 try :
  O00o0OO0 = { }
  for Oo0O0OOOoo in reg_item :
   O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] = { }
   if 76 - 76: i11iIiiIii + IiIi11iIIi1Ii / o0OOO - O0O - O00oOoOoO0o0O + o0OOO
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] = Oo0O0OOOoo ( 'expres' ) [ 0 ] . string
    if not O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] :
     O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] = ''
   except :
    OO ( "Regex: -- No Referer --" )
   O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'page' ] = Oo0O0OOOoo ( 'page' ) [ 0 ] . string
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'refer' ] = Oo0O0OOOoo ( 'referer' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No Referer --" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'connection' ] = Oo0O0OOOoo ( 'connection' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No connection --" )
    if 51 - 51: iIii1I11I1II1 . II + iIii1I11I1II1
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = Oo0O0OOOoo ( 'notplayable' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No notplayable --" )
    if 95 - 95: oOooOoO0Oo0O
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = Oo0O0OOOoo ( 'noredirect' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No noredirect --" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'origin' ] = Oo0O0OOOoo ( 'origin' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No origin --" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = Oo0O0OOOoo ( 'includeheaders' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No includeheaders --" )
    if 46 - 46: oo000 + O0O
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = Oo0O0OOOoo ( 'x-req' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No x-req --" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = Oo0O0OOOoo ( 'x-forward' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No x-forward --" )
    if 70 - 70: O0oo0OO0 / iIii1I11I1II1
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'agent' ] = Oo0O0OOOoo ( 'agent' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No User Agent --" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'post' ] = Oo0O0OOOoo ( 'post' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a post" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = Oo0O0OOOoo ( 'rawpost' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a rawpost" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = Oo0O0OOOoo ( 'htmlunescape' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a htmlunescape" )
    if 85 - 85: OoooooooOO % i1IIi * OoooooooOO / o0OOO
    if 96 - 96: OoooooooOO + iiiiIi11i
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = Oo0O0OOOoo ( 'readcookieonly' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a readCookieOnly" )
    if 44 - 44: iiiiIi11i
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = Oo0O0OOOoo ( 'cookiejar' ) [ 0 ] . string
    if not O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    OO ( "Regex: -- Not a cookieJar" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = Oo0O0OOOoo ( 'setcookie' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a setcookie" )
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = Oo0O0OOOoo ( 'appendcookie' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a appendcookie" )
    if 20 - 20: iii1I1I + O00oOoOoO0o0O / O0 % iIii1I11I1II1
   try :
    O00o0OO0 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = Oo0O0OOOoo ( 'ignorecache' ) [ 0 ] . string
   except :
    OO ( "Regex: -- no ignorecache" )
    if 88 - 88: oo000 / i11i
    if 87 - 87: o0OOO - o0OOO - O0oo0OO0 + iiiiIi11i
    if 82 - 82: iiiiIi11i / iIii1I11I1II1 . oOooOoO0Oo0O . Ii1I / IiIi11iIIi1Ii
    if 42 - 42: IIiI1I11i11
    if 19 - 19: iiiiIi11i % o0OOO * iIii1I11I1II1 + oOooOoO0Oo0O
  O00o0OO0 = urllib . quote ( repr ( O00o0OO0 ) )
  return O00o0OO0
  if 46 - 46: IIiI1I11i11
 except :
  O00o0OO0 = None
  OO ( 'regex Error: ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
  if 1 - 1: O0oo0OO0
def O0O0Ooo ( url ) :
 try :
  for Oo0O0OOOoo in range ( 1 , 51 ) :
   Ooo0oOooo0 = oOoO0 ( url )
   if "EXT-X-STREAM-INF" in Ooo0oOooo0 : return url
   if not "EXTM3U" in Ooo0oOooo0 : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 77 - 77: iIii1I11I1II1 . O0oo0OO0 % O0oo0OO0 + i11iIiiIii
  if 72 - 72: iIii1I11I1II1 * O00oOoOoO0o0O % II / O0O
def I11i1II ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 72 - 72: iIii1I11I1II1 . i1IIi / IIiI1I11i11 . i11i
  if 54 - 54: i11i % i11i
 Oo00000o0o = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 72 - 72: Ii1I % o0OOO + O0O / iiiiIi11i + Oo0ooO0oo0oO
 I1I1i = True
 if 1 - 1: iii1I1I % Ii1I + O0 + i1IIi - O0O
 if 22 - 22: oOooOoO0Oo0O % o0OOO
 if 57 - 57: Ii1I + O0 . O00oOoOoO0o0O
 if 46 - 46: Oo0ooO0oo0oO
 for ii1iIi1iIiI1i in Oo00000o0o :
  if ii1iIi1iIiI1i in regexs :
   if 40 - 40: i1IIi % Ii1I
   ooo0o00 = regexs [ ii1iIi1iIiI1i ]
   if 99 - 99: O0 . iii1I1I + iIii1I11I1II1
   I11IIi = False
   if 66 - 66: iiiiIi11i % O0O . Ii1I
   if 86 - 86: iIii1I11I1II1
   if 'cookiejar' in ooo0o00 :
    if 76 - 76: II + iIii1I11I1II1 / O0 / o0OOO
    I11IIi = ooo0o00 [ 'cookiejar' ]
    if '$doregex' in I11IIi :
     cookieJar = I11i1II ( regexs , ooo0o00 [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     I11IIi = True
    else :
     I11IIi = True
     if 61 - 61: Ii1I % Ii1I * IiIi11iIIi1Ii / IiIi11iIIi1Ii
   if I11IIi :
    if cookieJar == None :
     if 75 - 75: Oo0ooO0oo0oO . II
     cookie_jar_file = None
     if 'open[' in ooo0o00 [ 'cookiejar' ] :
      cookie_jar_file = ooo0o00 [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 50 - 50: oo000
     cookieJar = O00o0OO0000oo ( cookie_jar_file )
     if cookie_jar_file :
      i1OO0oOOoo ( cookieJar , cookie_jar_file )
      if 52 - 52: IiIi11iIIi1Ii % IIiI1I11i11
      if 64 - 64: O0 % iii1I1I % O0 * O0O . iiiiIi11i + oOooOoO0Oo0O
      if 75 - 75: iii1I1I . OoooooooOO % IiIi11iIIi1Ii * iii1I1I % OoooooooOO
    elif 'save[' in ooo0o00 [ 'cookiejar' ] :
     cookie_jar_file = ooo0o00 [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     I11i1 = os . path . join ( Oo0o0000o0o0 , cookie_jar_file )
     print 'complete_path' , I11i1
     i1OO0oOOoo ( cookieJar , cookie_jar_file )
     if 28 - 28: iii1I1I
     if 58 - 58: oo000
   if ooo0o00 [ 'page' ] and '$doregex' in ooo0o00 [ 'page' ] :
    ooo0o00 [ 'page' ] = I11i1II ( regexs , ooo0o00 [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 37 - 37: IIiI1I11i11 - iIii1I11I1II1 / o0OOO
   if 'setcookie' in ooo0o00 and ooo0o00 [ 'setcookie' ] and '$doregex' in ooo0o00 [ 'setcookie' ] :
    ooo0o00 [ 'setcookie' ] = I11i1II ( regexs , ooo0o00 [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in ooo0o00 and ooo0o00 [ 'appendcookie' ] and '$doregex' in ooo0o00 [ 'appendcookie' ] :
    ooo0o00 [ 'appendcookie' ] = I11i1II ( regexs , ooo0o00 [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 73 - 73: i11iIiiIii - Oo0ooO0oo0oO
    if 25 - 25: OoooooooOO + Oo0ooO0oo0oO * o0OOO
   if 'post' in ooo0o00 and '$doregex' in ooo0o00 [ 'post' ] :
    ooo0o00 [ 'post' ] = I11i1II ( regexs , ooo0o00 [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    print 'post is now' , ooo0o00 [ 'post' ]
    if 92 - 92: oOooOoO0Oo0O + iii1I1I + O0 / IiIi11iIIi1Ii + I1i1iI1i
   if 'rawpost' in ooo0o00 and '$doregex' in ooo0o00 [ 'rawpost' ] :
    ooo0o00 [ 'rawpost' ] = I11i1II ( regexs , ooo0o00 [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 18 - 18: II * oo000 . O0oo0OO0 / o0OOO / i11iIiiIii
    if 21 - 21: iiiiIi11i / o0OOO + O00oOoOoO0o0O + OoooooooOO
   if 'rawpost' in ooo0o00 and '$epoctime$' in ooo0o00 [ 'rawpost' ] :
    ooo0o00 [ 'rawpost' ] = ooo0o00 [ 'rawpost' ] . replace ( '$epoctime$' , OoOoI1iI11iIiIi1 ( ) )
    if 72 - 72: I1i1iI1i
   if 'rawpost' in ooo0o00 and '$epoctime2$' in ooo0o00 [ 'rawpost' ] :
    ooo0o00 [ 'rawpost' ] = ooo0o00 [ 'rawpost' ] . replace ( '$epoctime2$' , OO0ooo0oOO ( ) )
    if 97 - 97: oOooOoO0Oo0O / O0oo0OO0
    if 71 - 71: i11i / i1IIi . o0OOO % OoooooooOO . oo000
   ii11i1iIII = ''
   if ooo0o00 [ 'page' ] and ooo0o00 [ 'page' ] in cachedPages and not 'ignorecache' in ooo0o00 and forCookieJarOnly == False :
    ii11i1iIII = cachedPages [ ooo0o00 [ 'page' ] ]
   else :
    if ooo0o00 [ 'page' ] and not ooo0o00 [ 'page' ] == '' and ooo0o00 [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in ooo0o00 [ 'page' ] :
      ooo0o00 [ 'page' ] = ooo0o00 [ 'page' ] . replace ( '$epoctime$' , OoOoI1iI11iIiIi1 ( ) )
     if '$epoctime2$' in ooo0o00 [ 'page' ] :
      ooo0o00 [ 'page' ] = ooo0o00 [ 'page' ] . replace ( '$epoctime2$' , OO0ooo0oOO ( ) )
      if 41 - 41: i1IIi * i11i / OoooooooOO . Ii1I
      if 83 - 83: O0oo0OO0 . O0 / IIiI1I11i11 / Ii1I - i11i
     oO0oO0 = ooo0o00 [ 'page' ] . split ( '|' )
     i1i1IIIIi1i = oO0oO0 [ 0 ]
     Ii11iiI = None
     if len ( oO0oO0 ) > 1 :
      Ii11iiI = oO0oO0 [ 1 ]
     oOo = urllib2 . Request ( i1i1IIIIi1i )
     oOo . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     if 'refer' in ooo0o00 :
      oOo . add_header ( 'Referer' , ooo0o00 [ 'refer' ] )
     if 'agent' in ooo0o00 :
      oOo . add_header ( 'User-agent' , ooo0o00 [ 'agent' ] )
     if 'x-req' in ooo0o00 :
      oOo . add_header ( 'X-Requested-With' , ooo0o00 [ 'x-req' ] )
     if 'x-forward' in ooo0o00 :
      oOo . add_header ( 'X-Forwarded-For' , ooo0o00 [ 'x-forward' ] )
     if 'setcookie' in ooo0o00 :
      print 'adding cookie' , ooo0o00 [ 'setcookie' ]
      oOo . add_header ( 'Cookie' , ooo0o00 [ 'setcookie' ] )
     if 'appendcookie' in ooo0o00 :
      print 'appending cookie to cookiejar' , ooo0o00 [ 'appendcookie' ]
      IIi1iiii1iI = ooo0o00 [ 'appendcookie' ]
      IIi1iiii1iI = IIi1iiii1iI . split ( ';' )
      for iIiiii in IIi1iiii1iI :
       O0000OOO0 , ooo0 = iIiiii . split ( '=' )
       oO000oOo00o0o , O0000OOO0 = O0000OOO0 . split ( ':' )
       O00oO0 = cookielib . Cookie ( version = 0 , name = O0000OOO0 , value = ooo0 , port = None , port_specified = False , domain = oO000oOo00o0o , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( O00oO0 )
       if 70 - 70: iii1I1I . o0OOO * OoooooooOO - Oo0ooO0oo0oO * oOooOoO0Oo0O + oo000
       if 10 - 10: IiIi11iIIi1Ii / i11iIiiIii
       if 92 - 92: iii1I1I . I1i1iI1i
       if 85 - 85: o0OOO . I1i1iI1i
     if 'origin' in ooo0o00 :
      oOo . add_header ( 'Origin' , ooo0o00 [ 'origin' ] )
     if Ii11iiI :
      Ii11iiI = Ii11iiI . split ( '&' )
      for iIiiii in Ii11iiI :
       O0000OOO0 , ooo0 = iIiiii . split ( '=' )
       oOo . add_header ( O0000OOO0 , ooo0 )
       if 78 - 78: II * I1i1iI1i + iIii1I11I1II1 + iIii1I11I1II1 / I1i1iI1i . O00oOoOoO0o0O
       if 97 - 97: II / I1i1iI1i % i1IIi % o0OOO
     if not cookieJar == None :
      if 18 - 18: iIii1I11I1II1 % iii1I1I
      O00oO0o0o0o0o0 = urllib2 . HTTPCookieProcessor ( cookieJar )
      I1Iiiiiii = urllib2 . build_opener ( O00oO0o0o0o0o0 , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      I1Iiiiiii = urllib2 . install_opener ( I1Iiiiiii )
      if 'noredirect' in ooo0o00 :
       I1IIIiI1I1ii1 = urllib2 . build_opener ( IiiiIiI1iIiI1 )
       I1Iiiiiii = urllib2 . install_opener ( I1IIIiI1I1ii1 )
       if 30 - 30: O0 * OoooooooOO
     if 'connection' in ooo0o00 :
      print '..........................connection//////.' , ooo0o00 [ 'connection' ]
      from keepalive import HTTPHandler
      I1iIIIi1 = HTTPHandler ( )
      I1Iiiiiii = urllib2 . build_opener ( I1iIIIi1 )
      urllib2 . install_opener ( I1Iiiiiii )
      if 17 - 17: iIii1I11I1II1 . OoooooooOO / iii1I1I % i11i % i1IIi / i11iIiiIii
      if 58 - 58: IIiI1I11i11 . i11i + iiiiIi11i - i11iIiiIii / i11i / O0
     oOOoOo = None
     if 89 - 89: i11i + i1IIi + i11i
     if 'post' in ooo0o00 :
      IiII1II11I = ooo0o00 [ 'post' ]
      if '$LiveStreamRecaptcha' in IiII1II11I :
       ( O0Oo00O , OOo0o000oO ) = oO0o00oOOooO0 ( ooo0o00 [ 'page' ] )
       if O0Oo00O :
        IiII1II11I += 'recaptcha_challenge_field:' + O0Oo00O + ',recaptcha_response_field:' + OOo0o000oO
      OOOoO000 = IiII1II11I . split ( ',' ) ;
      oOOoOo = { }
      for oOOOO in OOOoO000 :
       O0000OOO0 = oOOOO . split ( ':' ) [ 0 ] ;
       ooo0 = oOOOO . split ( ':' ) [ 1 ] ;
       oOOoOo [ O0000OOO0 ] = ooo0
      oOOoOo = urllib . urlencode ( oOOoOo )
      if 49 - 49: i11i . iiiiIi11i . i11iIiiIii % Oo0ooO0oo0oO
     if 'rawpost' in ooo0o00 :
      oOOoOo = ooo0o00 [ 'rawpost' ]
      if '$LiveStreamRecaptcha' in oOOoOo :
       ( O0Oo00O , OOo0o000oO ) = oO0o00oOOooO0 ( ooo0o00 [ 'page' ] )
       if O0Oo00O :
        oOOoOo += '&recaptcha_challenge_field=' + O0Oo00O + '&recaptcha_response_field=' + OOo0o000oO
        if 34 - 34: I1i1iI1i % Oo0ooO0oo0oO
        if 3 - 3: i11i / Ii1I + Oo0ooO0oo0oO . II . O0O
        if 83 - 83: iiiiIi11i + OoooooooOO
        if 22 - 22: O00oOoOoO0o0O % O0oo0OO0 * OoooooooOO - IiIi11iIIi1Ii / iIii1I11I1II1
     if oOOoOo :
      oOoOoO = urllib2 . urlopen ( oOo , oOOoOo )
     else :
      oOoOoO = urllib2 . urlopen ( oOo )
      if 86 - 86: OoooooooOO . O0oo0OO0 % oo000 / iii1I1I * O0oo0OO0 / IiIi11iIIi1Ii
     ii11i1iIII = oOoOoO . read ( )
     ii11i1iIII = oOoOOo000oOoO0 ( ii11i1iIII )
     if 86 - 86: i11i % i11iIiiIii + O00oOoOoO0o0O % i11iIiiIii
     if 'includeheaders' in ooo0o00 :
      ii11i1iIII += str ( oOoOoO . headers . get ( 'Set-Cookie' ) )
      if 92 - 92: i11iIiiIii - O0oo0OO0 / II / iiiiIi11i
     oOoOoO . close ( )
     cachedPages [ ooo0o00 [ 'page' ] ] = ii11i1iIII
     if 43 - 43: i11i + Ii1I + O0oo0OO0
     if 40 - 40: IiIi11iIIi1Ii
     if 67 - 67: iiiiIi11i + i11i - O0 . iiiiIi11i * i11i * iii1I1I
     if forCookieJarOnly :
      return cookieJar
    elif ooo0o00 [ 'page' ] and not ooo0o00 [ 'page' ] . startswith ( 'http' ) :
     if ooo0o00 [ 'page' ] . startswith ( '$pyFunction:' ) :
      o00 = OO00O0oOO ( ooo0o00 [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar )
      if forCookieJarOnly :
       return cookieJar
      ii11i1iIII = o00
     else :
      ii11i1iIII = ooo0o00 [ 'page' ]
   if '$pyFunction:playmedia(' in ooo0o00 [ 'expre' ] or 'ActivateWindow' in ooo0o00 [ 'expre' ] or any ( x in url for x in Oo ) :
    I1I1i = False
   if '$doregex' in ooo0o00 [ 'expre' ] :
    ooo0o00 [ 'expre' ] = I11i1II ( regexs , ooo0o00 [ 'expre' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 4 - 4: OoooooooOO - i1IIi % O00oOoOoO0o0O - Ii1I * IiIi11iIIi1Ii
    if 85 - 85: OoooooooOO * iIii1I11I1II1 . O0oo0OO0 / OoooooooOO % oOooOoO0Oo0O % O0
   if not ooo0o00 [ 'expre' ] == '' :
    print 'doing it ' , ooo0o00 [ 'expre' ]
    if '$LiveStreamCaptcha' in ooo0o00 [ 'expre' ] :
     o00 = I1iii ( ooo0o00 , ii11i1iIII , cookieJar )
     if 86 - 86: o0OOO * O0 * Oo0ooO0oo0oO
     url = url . replace ( "$doregex[" + ii1iIi1iIiI1i + "]" , o00 )
    elif ooo0o00 [ 'expre' ] . startswith ( '$pyFunction:' ) :
     if 51 - 51: i11i + Oo0ooO0oo0oO . i1IIi . o0OOO + oo000 * oOooOoO0Oo0O
     o00 = OO00O0oOO ( ooo0o00 [ 'expre' ] . split ( '$pyFunction:' ) [ 1 ] , ii11i1iIII , cookieJar )
     if 'ActivateWindow' in ooo0o00 [ 'expre' ] : return
     print 'still hre'
     print 'url k val' , url , ii1iIi1iIiI1i , o00
     if 72 - 72: iiiiIi11i + iiiiIi11i / i11i . OoooooooOO % O00oOoOoO0o0O
     url = url . replace ( "$doregex[" + ii1iIi1iIiI1i + "]" , o00 )
    else :
     if not ii11i1iIII == '' :
      III = re . compile ( ooo0o00 [ 'expre' ] ) . search ( ii11i1iIII )
      o00 = ''
      try :
       o00 = III . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     else :
      o00 = ooo0o00 [ 'expre' ]
     if rawPost :
      print 'rawpost'
      o00 = urllib . quote_plus ( o00 )
     if 'htmlunescape' in ooo0o00 :
      if 41 - 41: i11iIiiIii + IIiI1I11i11 / oOooOoO0Oo0O . OoooooooOO % iiiiIi11i % i1IIi
      import HTMLParser
      o00 = HTMLParser . HTMLParser ( ) . unescape ( o00 )
     url = url . replace ( "$doregex[" + ii1iIi1iIiI1i + "]" , o00 )
     if 70 - 70: IIiI1I11i11 . OoooooooOO - O0oo0OO0
   else :
    url = url . replace ( "$doregex[" + ii1iIi1iIiI1i + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , OoOoI1iI11iIiIi1 ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , OO0ooo0oOO ( ) )
  if 30 - 30: o0OOO % oOooOoO0Oo0O
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , O0Oo00 ( cookieJar ) )
  if 41 - 41: iIii1I11I1II1 % iii1I1I
 if recursiveCall : return url
 print 'final url' , url
 if url == "" :
  return
 else :
  return url , I1I1i
  if 59 - 59: Ii1I + i11iIiiIii
  if 88 - 88: i11iIiiIii - II
  if 67 - 67: Ii1I . IIiI1I11i11 + oo000 - OoooooooOO
def OOOoO ( t ) :
 import hashlib
 iIiiii = hashlib . md5 ( )
 iIiiii . update ( t )
 return iIiiii . hexdigest ( )
 if 14 - 14: iii1I1I . iIii1I11I1II1 . OoooooooOO . i11i / IiIi11iIIi1Ii
def IiIi1 ( encrypted ) :
 i111iiI1ii = ""
 for o00 in encrypted . split ( ':' ) :
  i111iiI1ii += chr ( int ( o00 . replace ( "0m0" , "" ) ) / 84 / 5 )
 return i111iiI1ii
 if 24 - 24: oo000 / OoooooooOO . i11i . oOooOoO0Oo0O % O0 % O00oOoOoO0o0O
def IiIII1i1i ( media_url ) :
 try :
  import CustomPlayer
  II11I = CustomPlayer . MyXBMCPlayer ( )
  oo0oOO00oO = xbmcgui . ListItem ( label = str ( O00O0oOO00O00 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  II11I . play ( media_url , oo0oOO00oO )
  xbmc . sleep ( 1000 )
  while II11I . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 36 - 36: Ii1I
 if 84 - 84: I1i1iI1i . O0O . i11i . iii1I1I / O00oOoOoO0o0O % o0OOO
def OOO0oOoO0O ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  OoOo000oOo0oo = page_value
  page_value = oOoO0 ( page_value , headers = referer )
  if 65 - 65: oo000 / O0O % Oo0ooO0oo0oO
 iIiIIii = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 61 - 61: IiIi11iIIi1Ii / Ii1I / IIiI1I11i11 * O0
 iIII1i1i = re . compile ( iIiIIii ) . findall ( page_value )
 OOOoO00 = ""
 if iIII1i1i and len ( iIII1i1i ) > 0 :
  for ooo0 in iIII1i1i :
   IiI1iii11iIi1 = i1iI11I1II1 ( ooo0 )
   ii11II1i = oO0Oo0O0o ( IiI1iii11iIi1 , '\'(.*?)\'' )
   if 'unescape' in IiI1iii11iIi1 :
    IiI1iii11iIi1 = urllib . unquote ( ii11II1i )
   OOOoO00 += IiI1iii11iIi1 + '\n'
  print 'final value is ' , OOOoO00
  if 58 - 58: IIiI1I11i11 . Oo0ooO0oo0oO - IIiI1I11i11 - I1i1iI1i * O00oOoOoO0o0O
  OoOo000oOo0oo = oO0Oo0O0o ( OOOoO00 , 'src="(.*?)"' )
  if 28 - 28: oo000 * O0O . iii1I1I % iii1I1I / iii1I1I * I1i1iI1i
  page_value = oOoO0 ( OoOo000oOo0oo , headers = referer )
  if 64 - 64: i11i - oOooOoO0Oo0O
  if 68 - 68: II - Ii1I - iIii1I11I1II1 / oo000 + Ii1I - O0O
  if 75 - 75: O0oo0OO0 / IiIi11iIIi1Ii % iIii1I11I1II1 . OoooooooOO % OoooooooOO % i11i
 Ii1i1i1111 = oO0Oo0O0o ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 o0oO0O00oOo = oO0Oo0O0o ( page_value , 'file\',\s\'(.*?)\'' )
 if 26 - 26: Oo0ooO0oo0oO % I1i1iI1i % iiiiIi11i % O00oOoOoO0o0O
 if 55 - 55: II % OoooooooOO / OoooooooOO % OoooooooOO
 return Ii1i1i1111 + ' playpath=' + o0oO0O00oOo + ' pageUrl=' + OoOo000oOo0oo
 if 52 - 52: o0OOO + o0OOO . i11i
def Iii ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = oOoO0 ( page_value , headers = referer )
 iIiIIii = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 iIII1i1i = re . compile ( iIiIIii ) . findall ( page_value ) [ 0 ]
 if 6 - 6: Ii1I - o0OOO + O00oOoOoO0o0O + i1IIi / O0 / IiIi11iIIi1Ii
 o00O0O , o000o , I1i1i1iii , Iiii1I1 , O0II11i11II , ooo0 = ( iIII1i1i )
 O0II11i11II = int ( O0II11i11II )
 o00O0O = int ( o00O0O ) / O0II11i11II
 o000o = int ( o000o ) / O0II11i11II
 I1i1i1iii = int ( I1i1i1iii ) / O0II11i11II
 Iiii1I1 = int ( Iiii1I1 ) / O0II11i11II
 if 29 - 29: IIiI1I11i11 % O0O % Oo0ooO0oo0oO . IiIi11iIIi1Ii / OoooooooOO * II
 o0 = 'rtmp://' + str ( o00O0O ) + '.' + str ( o000o ) + '.' + str ( I1i1i1iii ) + '.' + str ( Iiii1I1 ) + ooo0 ;
 return o0
 if 78 - 78: iIii1I11I1II1 + iii1I1I - O00oOoOoO0o0O * I1i1iI1i - OoooooooOO % oo000
def i1OoOO ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 iII111ii = os . path . join ( Oo0o0000o0o0 , 'testfile.m3u' )
 str += '\n'
 iIII1I1i1i ( iII111ii , str )
 if 79 - 79: O00oOoOoO0o0O . O0O
 return iII111ii
 if 40 - 40: IiIi11iIIi1Ii + IIiI1I11i11 . IiIi11iIIi1Ii % II
def iIII1I1i1i ( file_name , page_data , append = False ) :
 if append :
  O0II11i11II = open ( file_name , 'a' )
  O0II11i11II . write ( page_data )
  O0II11i11II . close ( )
 else :
  O0II11i11II = open ( file_name , 'wb' )
  O0II11i11II . write ( page_data )
  O0II11i11II . close ( )
  return ''
  if 15 - 15: O00oOoOoO0o0O * IIiI1I11i11 % o0OOO * iIii1I11I1II1 - i11iIiiIii
def Oo00OOOOoo0oo ( file_name ) :
 O0II11i11II = open ( file_name , 'rb' )
 Iiii1I1 = O0II11i11II . read ( )
 O0II11i11II . close ( )
 return Iiii1I1
 if 80 - 80: I1i1iI1i * oo000 * i11i - O0 . oo000 % oOooOoO0Oo0O
def II1 ( page_data ) :
 import re , base64 , urllib ;
 iiIIIiIii = page_data
 while 'geh(' in iiIIIiIii :
  if iiIIIiIii . startswith ( 'lol(' ) : iiIIIiIii = iiIIIiIii [ 5 : - 1 ]
  if 23 - 23: O0oo0OO0 + iii1I1I . oo000 * oOooOoO0Oo0O + o0OOO
  iiIIIiIii = re . compile ( '"(.*?)"' ) . findall ( iiIIIiIii ) [ 0 ] ;
  iiIIIiIii = base64 . b64decode ( iiIIIiIii ) ;
  iiIIIiIii = urllib . unquote ( iiIIIiIii ) ;
 print iiIIIiIii
 return iiIIIiIii
 if 18 - 18: Oo0ooO0oo0oO * IiIi11iIIi1Ii . Oo0ooO0oo0oO / O0
def iiIII1II ( page_data ) :
 print 'get_dag_url2' , page_data
 oOo00oOOOOO = oOoO0 ( page_data ) ;
 OoOOo0O00 = '(http.*)'
 import uuid
 iIiI = str ( uuid . uuid1 ( ) ) . upper ( )
 iIIIi1i1I11i = re . compile ( OoOOo0O00 ) . findall ( oOo00oOOOOO )
 ooOO00oOo = [ ( 'X-Playback-Session-Id' , iIiI ) ]
 for oOO0OO0OO in iIIIi1i1I11i :
  try :
   oOOoooO = oOoO0 ( oOO0OO0OO , headers = ooOO00oOo ) ;
   if 22 - 22: iii1I1I + iIii1I11I1II1
  except : pass
  if 24 - 24: oo000 % i1IIi + O0oo0OO0 . i11iIiiIii . o0OOO
 return page_data + '|&X-Playback-Session-Id=' + iIiI
 if 17 - 17: o0OOO . i11i . II / o0OOO
 if 57 - 57: iii1I1I
def oO0 ( page_data ) :
 print 'get_dag_url' , page_data
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  ooOO00oOo = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = oOoO0 ( page_data , headers = ooOO00oOo ) ;
  if 87 - 87: iiiiIi11i % O00oOoOoO0o0O
 if '127.0.0.1' in page_data :
  return oo0OOOoOo ( page_data )
 elif oO0Oo0O0o ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  IIiiIIi1 = oO0Oo0O0o ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oO0Oo0O0o ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oO0Oo0O0o ( page_data , '\\?y=([^&]+)&' )
 else :
  IIiiIIi1 = oO0Oo0O0o ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( IIiiIIi1 ) == 0 :
   IIiiIIi1 = page_data
 IIiiIIi1 = IIiiIIi1 . replace ( ' ' , '%20' )
 return IIiiIIi1
 if 51 - 51: oo000
def oO0Oo0O0o ( data , re_patten ) :
 Oo0O00Oo0o0 = ''
 ooo0o00 = re . search ( re_patten , data )
 if ooo0o00 != None :
  Oo0O00Oo0o0 = ooo0o00 . group ( 1 )
 else :
  Oo0O00Oo0o0 = ''
 return Oo0O00Oo0o0
 if 14 - 14: Oo0ooO0oo0oO % iiiiIi11i % IIiI1I11i11 - i11iIiiIii
def oo0OOOoOo ( page_data ) :
 IIiiIIi1 = ''
 if '127.0.0.1' in page_data :
  IIiiIIi1 = oO0Oo0O0o ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + oO0Oo0O0o ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 53 - 53: O00oOoOoO0o0O % IIiI1I11i11
 if oO0Oo0O0o ( page_data , 'token=([^&]+)&' ) != '' :
  IIiiIIi1 = IIiiIIi1 + '?token=' + oO0Oo0O0o ( page_data , 'token=([^&]+)&' )
 elif oO0Oo0O0o ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  IIiiIIi1 = oO0Oo0O0o ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oO0Oo0O0o ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oO0Oo0O0o ( page_data , '\\?y=([^&]+)&' )
 else :
  IIiiIIi1 = oO0Oo0O0o ( page_data , 'HREF="([^"]+)"' )
  if 59 - 59: Ii1I % iIii1I11I1II1 . i1IIi + i11i * Oo0ooO0oo0oO
 if 'dag1.asx' in IIiiIIi1 :
  return oO0 ( IIiiIIi1 )
  if 41 - 41: O00oOoOoO0o0O % o0OOO
 if 'devinlivefs.fplive.net' not in IIiiIIi1 :
  IIiiIIi1 = IIiiIIi1 . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in IIiiIIi1 :
  IIiiIIi1 = IIiiIIi1 . replace ( 'permlive' , 'flive' )
 return IIiiIIi1
 if 12 - 12: Ii1I
 if 69 - 69: OoooooooOO + Ii1I
def IIi11I1 ( str_eval ) :
 iiiI111I = ""
 try :
  oooOOO00o0 = "w,i,s,e=(" + str_eval + ')'
  exec ( oooOOO00o0 )
  iiiI111I = i1I ( w , i , s , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 7 - 7: i11iIiiIii . IIiI1I11i11
 return iiiI111I
 if 99 - 99: iii1I1I - I1i1iI1i - iiiiIi11i % O0O
def i1I ( w , i , s , e ) :
 IiiIIiiiiii = 0 ;
 OOOO0o = 0 ;
 i1I1iIi1IiI = 0 ;
 i1111 = [ ] ;
 O0O000OOOo = [ ] ;
 while True :
  if ( IiiIIiiiiii < 5 ) :
   O0O000OOOo . append ( w [ IiiIIiiiiii ] )
  elif ( IiiIIiiiiii < len ( w ) ) :
   i1111 . append ( w [ IiiIIiiiiii ] ) ;
  IiiIIiiiiii += 1 ;
  if ( OOOO0o < 5 ) :
   O0O000OOOo . append ( i [ OOOO0o ] )
  elif ( OOOO0o < len ( i ) ) :
   i1111 . append ( i [ OOOO0o ] )
  OOOO0o += 1 ;
  if ( i1I1iIi1IiI < 5 ) :
   O0O000OOOo . append ( s [ i1I1iIi1IiI ] )
  elif ( i1I1iIi1IiI < len ( s ) ) :
   i1111 . append ( s [ i1I1iIi1IiI ] ) ;
  i1I1iIi1IiI += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( i1111 ) + len ( O0O000OOOo ) + len ( e ) ) :
   break ;
   if 12 - 12: iiiiIi11i
 Oo0O = '' . join ( i1111 )
 Ii11 = '' . join ( O0O000OOOo )
 OOOO0o = 0 ;
 II1i111 = [ ] ;
 for IiiIIiiiiii in range ( 0 , len ( i1111 ) , 2 ) :
  if 50 - 50: Oo0ooO0oo0oO % i1IIi
  iii11II1I = - 1 ;
  if ( ord ( Ii11 [ OOOO0o ] ) % 2 ) :
   iii11II1I = 1 ;
   if 5 - 5: oo000 - Oo0ooO0oo0oO * Oo0ooO0oo0oO
  II1i111 . append ( chr ( int ( Oo0O [ IiiIIiiiiii : IiiIIiiiiii + 2 ] , 36 ) - iii11II1I ) ) ;
  OOOO0o += 1 ;
  if ( OOOO0o >= len ( O0O000OOOo ) ) :
   OOOO0o = 0 ;
 o0 = '' . join ( II1i111 )
 if 'eval(function(w,i,s,e)' in o0 :
  print 'STILL GOing'
  o0 = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( o0 ) [ 0 ]
  return IIi11I1 ( o0 )
 else :
  print 'FINISHED'
  return o0
  if 50 - 50: i11i * o0OOO / O00oOoOoO0o0O . IiIi11iIIi1Ii + IIiI1I11i11 - Ii1I
def i1iI11I1II1 ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  II1iiIiIiI = None
  if page_value . startswith ( "http" ) :
   page_value = oOoO0 ( page_value )
  print 'page_value' , page_value
  if regex_for_text and len ( regex_for_text ) > 0 :
   page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   if 24 - 24: IIiI1I11i11 - i1IIi + iii1I1I
  page_value = IiiIi ( page_value , iterations , total_iteration )
 except : traceback . print_exc ( file = sys . stdout )
 print 'unpacked' , page_value
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  print 'sav1 unpacked' , page_value
 return page_value
 if 10 - 10: O0O / IIiI1I11i11
def IiiIi ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 print 'iteration' , iteration
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  I1iII11iIII1i1I = sJavascript . split ( 'var _0xcb8a=' )
  oooOOO00o0 = "myarray=" + I1iII11iIII1i1I [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( oooOOO00o0 )
  oOO0oo = 62
  IiIIi1I1I11Ii = int ( I1iII11iIII1i1I [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  o0OO = myarray [ 0 ]
  OoiiIiI = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as o0Ooo0O00 :
   o0Ooo0O00 . write ( str ( OoiiIiI ) )
   if 9 - 9: O0 . Oo0ooO0oo0oO
 else :
  if 55 - 55: IIiI1I11i11
  I1iII11iIII1i1I = sJavascript . split ( "rn p}('" )
  print I1iII11iIII1i1I
  if 77 - 77: i11i
  o0OO , oOO0oo , IiIIi1I1I11Ii , OoiiIiI = ( '' , '0' , '0' , '' )
  if 16 - 16: oOooOoO0Oo0O * i11i / iIii1I11I1II1 - O0oo0OO0
  oooOOO00o0 = "p1,a1,c1,k1=('" + I1iII11iIII1i1I [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( oooOOO00o0 )
 OoiiIiI = OoiiIiI . split ( '|' )
 I1iII11iIII1i1I = I1iII11iIII1i1I [ 1 ] . split ( "))'" )
 if 3 - 3: oOooOoO0Oo0O * II + i11i - O0O
 if 97 - 97: o0OOO / iiiiIi11i - IiIi11iIIi1Ii - oOooOoO0Oo0O - oOooOoO0Oo0O
 if 54 - 54: IIiI1I11i11 + oOooOoO0Oo0O / O0oo0OO0 . oOooOoO0Oo0O * oo000
 if 1 - 1: oo000 * O0O . i1IIi / IIiI1I11i11 . o0OOO + IIiI1I11i11
 if 17 - 17: IIiI1I11i11 + O0O / O00oOoOoO0o0O / O0oo0OO0 * Ii1I
 if 29 - 29: O0O % OoooooooOO * iiiiIi11i / i11i - iiiiIi11i
 if 19 - 19: i11iIiiIii
 if 54 - 54: i11i . iii1I1I
 if 73 - 73: oo000 . oOooOoO0Oo0O
 if 32 - 32: oo000 * oOooOoO0Oo0O % II * O00oOoOoO0o0O . O0
 if 48 - 48: O0oo0OO0 * O0oo0OO0
 if 13 - 13: O00oOoOoO0o0O / iii1I1I + oo000 . IiIi11iIIi1Ii % II
 if 48 - 48: oOooOoO0Oo0O / i11iIiiIii - IiIi11iIIi1Ii * iiiiIi11i / OoooooooOO
 if 89 - 89: iIii1I11I1II1 / oOooOoO0Oo0O - i11i / O00oOoOoO0o0O . i11iIiiIii . O00oOoOoO0o0O
 if 48 - 48: O0 + O0 . I1i1iI1i - II
 if 63 - 63: iiiiIi11i
 if 71 - 71: i1IIi . O00oOoOoO0o0O * O0oo0OO0 % OoooooooOO + Ii1I
 if 36 - 36: Oo0ooO0oo0oO
 if 49 - 49: Ii1I / OoooooooOO / oOooOoO0Oo0O
 if 74 - 74: I1i1iI1i % o0OOO
 if 7 - 7: i11i
 if 27 - 27: iiiiIi11i . OoooooooOO + i11iIiiIii
 OooO0 = ''
 Iiii1I1 = ''
 if 86 - 86: iii1I1I / IiIi11iIIi1Ii - IiIi11iIIi1Ii + o0OOO + iiiiIi11i
 if 33 - 33: IiIi11iIIi1Ii . O0oo0OO0 . Oo0ooO0oo0oO . i1IIi
 i1II1iII = str ( II1i ( o0OO , oOO0oo , IiIIi1I1I11Ii , OoiiIiI , OooO0 , Iiii1I1 , iteration ) )
 if 81 - 81: o0OOO
 if 94 - 94: iii1I1I + i11i % i11iIiiIii
 if 8 - 8: II * O0
 if 73 - 73: IiIi11iIIi1Ii / iiiiIi11i / iii1I1I / O0O
 if 11 - 11: oo000 + Oo0ooO0oo0oO - OoooooooOO / O0O
 if iteration >= totaliterations :
  if 34 - 34: II
  return i1II1iII
 else :
  if 45 - 45: II / IIiI1I11i11 / O00oOoOoO0o0O
  return IiiIi ( i1II1iII , iteration + 1 )
  if 44 - 44: o0OOO - O00oOoOoO0o0O / i11i * O0O * IIiI1I11i11
def II1i ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 73 - 73: IiIi11iIIi1Ii - oOooOoO0Oo0O * i1IIi / i11iIiiIii * Ii1I % i11i
 if 56 - 56: OoooooooOO * IIiI1I11i11 . IIiI1I11i11 . o0OOO
 if 24 - 24: IIiI1I11i11 . iii1I1I * O00oOoOoO0o0O % O0oo0OO0 / Ii1I
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   Oo0Ooo0O0 = str ( IiIIi1IiiIiI ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + Oo0Ooo0O0 + '\\b' , k [ c ] , p )
   else :
    p = iIIIIiiIii ( p , Oo0Ooo0O0 , k [ c ] )
    if 58 - 58: IIiI1I11i11
    if 9 - 9: iIii1I11I1II1 % o0OOO . Ii1I + OoooooooOO
    if 62 - 62: O0 / oOooOoO0Oo0O % O0 * O0O % oOooOoO0Oo0O
    if 33 - 33: oOooOoO0Oo0O . iiiiIi11i * O0O * iIii1I11I1II1
    if 5 - 5: IIiI1I11i11 / Oo0ooO0oo0oO % O0 . I1i1iI1i * Oo0ooO0oo0oO
    if 83 - 83: Ii1I
 return p
 if 12 - 12: i1IIi . i1IIi - IiIi11iIIi1Ii
 if 26 - 26: iIii1I11I1II1 % i11iIiiIii % o0OOO
 if 67 - 67: OoooooooOO
def iIIIIiiIii ( source_str , word_to_find , replace_with ) :
 IiIiIi1I1 = None
 IiIiIi1I1 = source_str . split ( word_to_find )
 if len ( IiIiIi1I1 ) > 1 :
  IiI1ii1Ii = [ ]
  oooOOOoOOOo0O = 0
  for O00oOoo0OoO0 in IiIiIi1I1 :
   if 62 - 62: i1IIi / II . oOooOoO0Oo0O * IiIi11iIIi1Ii
   IiI1ii1Ii . append ( O00oOoo0OoO0 )
   o00 = word_to_find
   if 21 - 21: IiIi11iIIi1Ii
   if 81 - 81: iii1I1I / iIii1I11I1II1 - II * I1i1iI1i . oOooOoO0Oo0O * o0OOO
   if oooOOOoOOOo0O == len ( IiIiIi1I1 ) - 1 :
    o00 = ''
   else :
    if len ( O00oOoo0OoO0 ) == 0 :
     if ( len ( IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] ) > 0 and IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      o00 = replace_with
      if 95 - 95: oOooOoO0Oo0O
    else :
     if ( IiIiIi1I1 [ oooOOOoOOOo0O ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] ) > 0 and IiIiIi1I1 [ oooOOOoOOOo0O + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      o00 = replace_with
      if 88 - 88: Oo0ooO0oo0oO % O0O + I1i1iI1i + I1i1iI1i * i11i
   IiI1ii1Ii . append ( o00 )
   oooOOOoOOOo0O += 1
   if 78 - 78: OoooooooOO
  source_str = '' . join ( IiI1ii1Ii )
 return source_str
 if 77 - 77: o0OOO / i1IIi / IIiI1I11i11 % Ii1I
def I1I1Iiii1 ( num , radix ) :
 if 2 - 2: iii1I1I + II
 Ooo0oOooo0 = ""
 if num == 0 : return '0'
 while num > 0 :
  Ooo0oOooo0 = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + Ooo0oOooo0
  num /= radix
 return Ooo0oOooo0
 if 76 - 76: I1i1iI1i
def IiIIi1IiiIiI ( cc , a ) :
 Oo0Ooo0O0 = "" if cc < a else IiIIi1IiiIiI ( int ( cc / a ) , a )
 cc = ( cc % a )
 OoOoOo0 = chr ( cc + 29 ) if cc > 35 else str ( I1I1Iiii1 ( cc , 36 ) )
 return Oo0Ooo0O0 + OoOoOo0
 if 39 - 39: iii1I1I - o0OOO
 if 53 - 53: IiIi11iIIi1Ii % O0oo0OO0 + II . IIiI1I11i11 - o0OOO % IiIi11iIIi1Ii
def O0Oo00 ( cookieJar ) :
 try :
  oOo0O = ""
  for oO00o0 , III1i111i in enumerate ( cookieJar ) :
   oOo0O += III1i111i . name + "=" + III1i111i . value + ";"
 except : pass
 if 42 - 42: o0OOO / i1IIi % oo000
 return oOo0O
 if 26 - 26: O00oOoOoO0o0O * iIii1I11I1II1 % O0O . IiIi11iIIi1Ii + IIiI1I11i11
 if 80 - 80: IIiI1I11i11 * O00oOoOoO0o0O + o0OOO * Ii1I
def i1OO0oOOoo ( cookieJar , COOKIEFILE ) :
 try :
  I11i1 = os . path . join ( Oo0o0000o0o0 , COOKIEFILE )
  cookieJar . save ( I11i1 , ignore_discard = True )
 except : pass
 if 16 - 16: iii1I1I / oOooOoO0Oo0O + O0O % iIii1I11I1II1 - i1IIi . iiiiIi11i
def O00o0OO0000oo ( COOKIEFILE ) :
 if 26 - 26: IiIi11iIIi1Ii * Oo0ooO0oo0oO . i1IIi
 ooOoOO = None
 if COOKIEFILE :
  try :
   I11i1 = os . path . join ( Oo0o0000o0o0 , COOKIEFILE )
   ooOoOO = cookielib . LWPCookieJar ( )
   ooOoOO . load ( I11i1 , ignore_discard = True )
  except :
   ooOoOO = None
   if 56 - 56: iIii1I11I1II1 . i11iIiiIii - Ii1I * i11i * I1i1iI1i
 if not ooOoOO :
  ooOoOO = cookielib . LWPCookieJar ( )
  if 5 - 5: Ii1I / Ii1I - o0OOO
 return ooOoOO
 if 79 - 79: o0OOO + I1i1iI1i
def OO00O0oOO ( fun_call , page_data , Cookie_Jar ) :
 iIiIIi = ''
 if i1iIIi1 not in sys . path :
  sys . path . append ( i1iIIi1 )
  if 14 - 14: IiIi11iIIi1Ii / Ii1I - iIii1I11I1II1 - iiiiIi11i % II
 print fun_call
 try :
  I1iIiI1IiIIII = 'import ' + fun_call . split ( '.' ) [ 0 ]
  print I1iIiI1IiIIII , sys . path
  exec ( I1iIiI1IiIIII )
  print 'done'
 except :
  print 'error in import'
  traceback . print_exc ( file = sys . stdout )
 print 'ret_val=' + fun_call
 exec ( 'ret_val=' + fun_call )
 print iIiIIi
 if 18 - 18: II % i11iIiiIii . iIii1I11I1II1 - O0oo0OO0
 return str ( iIiIIi )
 if 80 - 80: oOooOoO0Oo0O + iiiiIi11i - i1IIi . O00oOoOoO0o0O / IiIi11iIIi1Ii / oOooOoO0Oo0O
def oO0o00oOOooO0 ( url ) :
 I1Iiii = oOoO0 ( url )
 I1III1II1I11 = ""
 IIi11 = ""
 ooo0O0OOO000o = "<script.*?src=\"(.*?recap.*?)\""
 Oo0O00Oo0o0 = re . findall ( ooo0O0OOO000o , I1Iiii )
 iiI1iii = False
 OOoOOo00O0o0 = None
 IIi11 = None
 if 83 - 83: iIii1I11I1II1 % oo000 % IiIi11iIIi1Ii % I1i1iI1i . o0OOO % O0
 if Oo0O00Oo0o0 and len ( Oo0O00Oo0o0 ) > 0 :
  iIiIi1ii = Oo0O00Oo0o0 [ 0 ]
  iiI1iii = True
  if 28 - 28: iIii1I11I1II1 + iIii1I11I1II1
  iIiIii1ii = 'challenge.*?\'(.*?)\''
  IIiI1i = '\'(.*?)\''
  iII1 = oOoO0 ( iIiIi1ii )
  I1III1II1I11 = re . findall ( iIiIii1ii , iII1 ) [ 0 ]
  O000O = 'http://www.google.com/recaptcha/api/reload?c=' ;
  Oo00OO0 = iIiIi1ii . split ( 'k=' ) [ 1 ]
  O000O += I1III1II1I11 + '&k=' + Oo00OO0 + '&captcha_k=1&type=image&lang=en-GB'
  oo0O = oOoO0 ( O000O )
  OOoOOo00O0o0 = re . findall ( IIiI1i , oo0O ) [ 0 ]
  oO00OoOOOo = 'http://www.google.com/recaptcha/api/image?c=' + OOoOOo00O0o0
  if not oO00OoOOOo . startswith ( "http" ) :
   oO00OoOOOo = 'http://www.google.com/recaptcha/api/' + oO00OoOOOo
  import random
  O0000OOO0 = random . randrange ( 100 , 1000 , 5 )
  Oo0 = os . path . join ( Oo0o0000o0o0 , str ( O0000OOO0 ) + "captcha.img" )
  o0OOOOO0O = open ( Oo0 , "wb" )
  o0OOOOO0O . write ( oOoO0 ( oO00OoOOOo ) )
  o0OOOOO0O . close ( )
  I1I1IiIi1 = oOO0o0oo0 ( captcha = Oo0 )
  IIi11 = I1I1IiIi1 . get ( )
  os . remove ( Oo0 )
 return OOoOOo00O0o0 , IIi11
 if 78 - 78: Ii1I + O0oo0OO0 . Oo0ooO0oo0oO
def oOoO0 ( url , cookieJar = None , post = None , timeout = 20 , headers = None ) :
 if 91 - 91: iIii1I11I1II1 . IiIi11iIIi1Ii . o0OOO + OoooooooOO
 if 69 - 69: I1i1iI1i - oOooOoO0Oo0O
 O00oO0o0o0o0o0 = urllib2 . HTTPCookieProcessor ( cookieJar )
 I1Iiiiiii = urllib2 . build_opener ( O00oO0o0o0o0o0 , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 if 95 - 95: oOooOoO0Oo0O * i11iIiiIii . II
 oOo = urllib2 . Request ( url )
 oOo . add_header = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 if headers :
  for iIiiii , iIIi1 in headers :
   oOo . add_header ( iIiiii , iIIi1 )
   if 83 - 83: Oo0ooO0oo0oO * iii1I1I / IIiI1I11i11
 oOoOoO = I1Iiiiiii . open ( oOo , post , timeout = timeout )
 ii11i1iIII = oOoOoO . read ( )
 oOoOoO . close ( )
 return ii11i1iIII ;
 if 32 - 32: IiIi11iIIi1Ii + oo000 - OoooooooOO
def Ii11iii1II1i ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 o0OOoOO = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 iII1III1I1 = '' ;
 for Oo0O0OOOoo in range ( len ( o0OOoOO ) ) :
  iII1III1I1 += chr ( ord ( o0OOoOO [ Oo0O0OOOoo ] ) - o0OOoOO [ len ( o0OOoOO ) - 1 ] ) ;
 iII1III1I1 = urllib . unquote ( iII1III1I1 )
 print iII1III1I1
 return iII1III1I1
 if 12 - 12: iIii1I11I1II1 % II % II
def oOoOOo000oOoO0 ( str ) :
 o0i1iI1iiI1I = re . findall ( 'unescape\(\'(.*?)\'' , str )
 print 'js' , o0i1iI1iiI1I
 if ( not o0i1iI1iiI1I == None ) and len ( o0i1iI1iiI1I ) > 0 :
  for oO00oo000O in o0i1iI1iiI1I :
   if 7 - 7: O0 / O0oo0OO0 * iiiiIi11i
   str = str . replace ( oO00oo000O , urllib . unquote ( oO00oo000O ) )
 return str
 if 29 - 29: IiIi11iIIi1Ii
oo0 = 0
def I1iii ( m , html_page , cookieJar ) :
 global oo0
 oo0 += 1
 iIiIoO00Ooo0oO = m [ 'expre' ]
 OoOo000oOo0oo = m [ 'page' ]
 OOOo = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( iIiIoO00Ooo0oO ) [ 0 ]
 if 74 - 74: O00oOoOoO0o0O - OoooooooOO . IIiI1I11i11
 iIiIi1ii = re . compile ( OOOo ) . findall ( html_page ) [ 0 ]
 print iIiIoO00Ooo0oO , OOOo , iIiIi1ii
 if not iIiIi1ii . startswith ( "http" ) :
  III1Ii1i1I1 = 'http://' + "" . join ( OoOo000oOo0oo . split ( '/' ) [ 2 : 3 ] )
  if iIiIi1ii . startswith ( "/" ) :
   iIiIi1ii = III1Ii1i1I1 + iIiIi1ii
  else :
   iIiIi1ii = III1Ii1i1I1 + '/' + iIiIi1ii
   if 97 - 97: I1i1iI1i . II - I1i1iI1i + oOooOoO0Oo0O * i11i
 Oo0 = os . path . join ( Oo0o0000o0o0 , str ( oo0 ) + "captcha.jpg" )
 o0OOOOO0O = open ( Oo0 , "wb" )
 print ' c capurl' , iIiIi1ii
 oOo = urllib2 . Request ( iIiIi1ii )
 oOo . add_header = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 if 'refer' in m :
  oOo . add_header ( 'Referer' , m [ 'refer' ] )
 if 'agent' in m :
  oOo . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  oOo . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 10 - 10: O00oOoOoO0o0O + iii1I1I % OoooooooOO - oOooOoO0Oo0O
  if 70 - 70: Ii1I - O0oo0OO0
  if 2 - 2: iIii1I11I1II1
  if 45 - 45: OoooooooOO / i11iIiiIii
 urllib2 . urlopen ( oOo )
 oOoOoO = urllib2 . urlopen ( oOo )
 if 10 - 10: O0oo0OO0 - iiiiIi11i * iIii1I11I1II1 % iIii1I11I1II1 * Oo0ooO0oo0oO - o0OOO
 o0OOOOO0O . write ( oOoOoO . read ( ) )
 oOoOoO . close ( )
 o0OOOOO0O . close ( )
 I1I1IiIi1 = oOO0o0oo0 ( captcha = Oo0 )
 IIi11 = I1I1IiIi1 . get ( )
 return IIi11
 if 97 - 97: i11i % I1i1iI1i + I1i1iI1i - O0O / O00oOoOoO0o0O * oOooOoO0Oo0O
class oOO0o0oo0 ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 17 - 17: O00oOoOoO0o0O
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   i1i1IiIi1 = self . kbd . getText ( )
   self . close ( )
   return i1i1IiIi1
  self . close ( )
  return False
  if 22 - 22: iii1I1I * O0 . i11i - O0O
def OoOoI1iI11iIiIi1 ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 90 - 90: iiiiIi11i
def OO0ooo0oOO ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 94 - 94: iii1I1I / o0OOO * I1i1iI1i - oo000
def I1Ii11II1I1 ( ) :
 IiI1iI1IiiIi1 = [ ]
 OoO0oo = sys . argv [ 2 ]
 if len ( OoO0oo ) >= 2 :
  OoOoO0O = sys . argv [ 2 ]
  o0i1I11iI1iiI = OoOoO0O . replace ( '?' , '' )
  if ( OoOoO0O [ len ( OoOoO0O ) - 1 ] == '/' ) :
   OoOoO0O = OoOoO0O [ 0 : len ( OoOoO0O ) - 2 ]
  I1 = o0i1I11iI1iiI . split ( '&' )
  IiI1iI1IiiIi1 = { }
  for Oo0O0OOOoo in range ( len ( I1 ) ) :
   iioO0o = { }
   iioO0o = I1 [ Oo0O0OOOoo ] . split ( '=' )
   if ( len ( iioO0o ) ) == 2 :
    IiI1iI1IiiIi1 [ iioO0o [ 0 ] ] = iioO0o [ 1 ]
 return IiI1iI1IiiIi1
 if 50 - 50: O0oo0OO0 / O0oo0OO0 + Ii1I * II / o0OOO
 if 14 - 14: O00oOoOoO0o0O % oOooOoO0Oo0O - iIii1I11I1II1 . Ii1I + O0O - I1i1iI1i
def iI1iIiiiI1I1 ( ) :
 I1111 = json . loads ( open ( oO0o0o0ooO0oO ) . read ( ) )
 I11iiI1i1 = len ( I1111 )
 for Oo0O0OOOoo in I1111 :
  O00O0oOO00O00 = Oo0O0OOOoo [ 0 ]
  ii1ii11IIIiiI = Oo0O0OOOoo [ 1 ]
  OOOO = Oo0O0OOOoo [ 2 ]
  try :
   oO00OOoO00 = Oo0O0OOOoo [ 3 ]
   if oO00OOoO00 == None :
    raise
  except :
   if i11 . getSetting ( 'use_thumb' ) == "true" :
    oO00OOoO00 = OOOO
   else :
    oO00OOoO00 = oOO00oOO
  try : O0O0O0Oo = Oo0O0OOOoo [ 5 ]
  except : O0O0O0Oo = None
  try : O00o0OO0 = Oo0O0OOOoo [ 6 ]
  except : O00o0OO0 = None
  if 94 - 94: OoooooooOO . II + O00oOoOoO0o0O - oOooOoO0Oo0O
  if Oo0O0OOOoo [ 4 ] == 0 :
   i1i ( ii1ii11IIIiiI , O00O0oOO00O00 , OOOO , oO00OOoO00 , '' , '' , '' , 'fav' , O0O0O0Oo , O00o0OO0 , I11iiI1i1 )
  else :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI , Oo0O0OOOoo [ 4 ] , OOOO , oOO00oOO , '' , '' , '' , '' , 'fav' )
   if 1 - 1: IiIi11iIIi1Ii . O0
   if 37 - 37: i1IIi - Ii1I % OoooooooOO / Ii1I % II
def iiIiII11i1 ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 oOo00Ooo0o0 = [ ]
 try :
  if 33 - 33: iii1I1I
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( oO0o0o0ooO0oO ) == False :
  OO ( 'Making Favorites File' )
  oOo00Ooo0o0 . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  o00O0O = open ( oO0o0o0ooO0oO , "w" )
  o00O0O . write ( json . dumps ( oOo00Ooo0o0 ) )
  o00O0O . close ( )
 else :
  OO ( 'Appending Favorites' )
  o00O0O = open ( oO0o0o0ooO0oO ) . read ( )
  ii1I = json . loads ( o00O0O )
  ii1I . append ( ( name , url , iconimage , fanart , mode ) )
  o000o = open ( oO0o0o0ooO0oO , "w" )
  o000o . write ( json . dumps ( ii1I ) )
  o000o . close ( )
  if 87 - 87: oo000 / Oo0ooO0oo0oO + iIii1I11I1II1
  if 93 - 93: iIii1I11I1II1 + iiiiIi11i % II
def iii1IiI1I1 ( name ) :
 ii1I = json . loads ( open ( oO0o0o0ooO0oO ) . read ( ) )
 for oO00o0 in range ( len ( ii1I ) ) :
  if ii1I [ oO00o0 ] [ 0 ] == name :
   del ii1I [ oO00o0 ]
   o000o = open ( oO0o0o0ooO0oO , "w" )
   o000o . write ( json . dumps ( ii1I ) )
   o000o . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 64 - 64: II / O0 * oo000 * II
def Oo0o00OO0000 ( url ) :
 if i11 . getSetting ( 'Updatecommonresolvers' ) == 'true' :
  oOO0OO0OO = os . path . join ( oOo0oooo00o , 'genesisresolvers.py' )
  if xbmcvfs . exists ( oOO0OO0OO ) :
   os . remove ( oOO0OO0OO )
   if 60 - 60: iii1I1I / i1IIi % o0OOO / o0OOO * o0OOO . i11iIiiIii
  o0oOO00 = 'https://raw.githubusercontent.com/lambda81/lambda-addons/master/plugin.video.genesis/commonresolvers.py'
  ii11iiIi = urllib . urlretrieve ( o0oOO00 , oOO0OO0OO )
  i11 . setSetting ( 'Updatecommonresolvers' , 'false' )
 try :
  import genesisresolvers
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,Please enable Update Commonresolvers to Play in Settings. - ,10000)" )
  if 48 - 48: Oo0ooO0oo0oO % iii1I1I
 i1I1III1i1i = genesisresolvers . get ( url ) . result
 if url == i1I1III1i1i or i1I1III1i1i is None :
  if 4 - 4: I1i1iI1i / O00oOoOoO0o0O - O00oOoOoO0o0O
  xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies, Loading Stream.. - ,5000)" )
  import urlresolver
  Ii111iIIIi = urlresolver . HostedMediaFile ( url )
  if Ii111iIIIi :
   oo0ooO0O0o = urlresolver . resolve ( url )
   i1I1III1i1i = oo0ooO0O0o
 if i1I1III1i1i :
  if isinstance ( i1I1III1i1i , list ) :
   for ii1iIi1iIiI1i in i1I1III1i1i :
    oo0ooO = i11 . getSetting ( 'quality' )
    if ii1iIi1iIiI1i [ 'quality' ] == 'HD' :
     oo0ooO0O0o = ii1iIi1iIiI1i [ 'url' ]
     break
    elif ii1iIi1iIiI1i [ 'quality' ] == 'SD' :
     oo0ooO0O0o = ii1iIi1iIiI1i [ 'url' ]
    elif ii1iIi1iIiI1i [ 'quality' ] == '1080p' and i11 . getSetting ( '1080pquality' ) == 'true' :
     oo0ooO0O0o = ii1iIi1iIiI1i [ 'url' ]
     break
  else :
   oo0ooO0O0o = i1I1III1i1i
 return oo0ooO0O0o
def I11o0000o0Oo ( name , mu_playlist ) :
 import urlparse
 if i11 . getSetting ( 'ask_playlist_items' ) == 'true' :
  ooo0O0OOo0OoO = [ ]
  for Oo0O0OOOoo in mu_playlist :
   Ii1i1 = urlparse . urlparse ( Oo0O0OOOoo ) . netloc
   if Ii1i1 == '' :
    ooo0O0OOo0OoO . append ( name )
   else :
    ooo0O0OOo0OoO . append ( Ii1i1 )
  o0OO00 = xbmcgui . Dialog ( )
  oO00o0 = o0OO00 . select ( 'Choose a video source' , ooo0O0OOo0OoO )
  if oO00o0 >= 0 :
   if "&mode=19" in mu_playlist [ oO00o0 ] :
    xbmc . Player ( ) . play ( Oo0o00OO0000 ( mu_playlist [ oO00o0 ] . replace ( '&mode=19' , '' ) ) )
   elif "$doregex" in mu_playlist [ oO00o0 ] :
    if 65 - 65: iiiiIi11i + o0OOO / Ii1I
    oo0oo = mu_playlist [ oO00o0 ] . split ( '&regexs=' )
    if 49 - 49: i11iIiiIii % oo000 + I1i1iI1i . i11i % O0oo0OO0 * Ii1I
    ii1ii11IIIiiI , I1I1i = I11i1II ( oo0oo [ 1 ] , oo0oo [ 0 ] )
    xbmc . Player ( ) . play ( ii1ii11IIIiiI )
   else :
    ii1ii11IIIiiI = mu_playlist [ oO00o0 ]
    xbmc . Player ( ) . play ( ii1ii11IIIiiI )
 else :
  O0O0O0Oo = xbmc . PlayList ( 1 )
  O0O0O0Oo . clear ( )
  o0O0OOOOoOO0 = 0
  for Oo0O0OOOoo in mu_playlist :
   o0O0OOOOoOO0 += 1
   oooo = xbmcgui . ListItem ( '%s) %s' % ( str ( o0O0OOOOoOO0 ) , name ) )
   O0O0O0Oo . add ( Oo0O0OOOoo , oooo )
   xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
   if 27 - 27: i11iIiiIii - oOooOoO0Oo0O
   if 35 - 35: OoooooooOO - I1i1iI1i / O0O
def iii11i1 ( name , url ) :
 if i11 . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('Falcon Movies','Choose a location to save files.',15000," + I1IiIiiIII + ")" )
  i11 . openSettings ( )
 OoOoO0O = { 'url' : url , 'download_path' : i11 . getSetting ( 'save_location' ) }
 downloader . download ( name , OoOoO0O )
 o0OO00 = xbmcgui . Dialog ( )
 o0 = o0OO00 . yesno ( 'Falcon Movies' , 'Do you want to add this file as a source?' )
 if o0 :
  O0oo0OO0oOOOo ( os . path . join ( i11 . getSetting ( 'save_location' ) , name ) )
  if 48 - 48: II * o0OOO
  if 15 - 15: O0O * iii1I1I % iIii1I11I1II1 * o0OOO
def oo0oooooO0 ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False ) :
 if 31 - 31: O0O * O0 . iiiiIi11i
 oooOO0oOooO00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 OOO = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 ooO0O00Oo0o = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 ooO0O00Oo0o . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 ooO0O00Oo0o . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  iIIiI11i1I11 = [ ]
  if showcontext == 'source' :
   if name in str ( OooO0OO ) :
    iIIiI11i1I11 . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'download' :
   iIIiI11i1I11 . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   iIIiI11i1I11 . append ( ( 'Remove from Falcon Movies Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 29 - 29: O0O * iIii1I11I1II1 * O0 - oo000 / Oo0ooO0oo0oO
  if not name in I1I11I1I1I :
   iIIiI11i1I11 . append ( ( 'Add to Falcon Movies Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  ooO0O00Oo0o . addContextMenuItems ( iIIiI11i1I11 )
 OOO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oooOO0oOooO00 , listitem = ooO0O00Oo0o , isFolder = True )
 if 99 - 99: II
 return OOO
def o0OO00iIi11i ( url , title , media_type = 'video' ) :
 if 56 - 56: i11iIiiIii . II / O0oo0OO0
 if 48 - 48: O0O * Ii1I + iIii1I11I1II1 / i11i
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 100 - 100: iii1I1I
   YDStreamExtractor . manageDownloads ( )
  else :
   OOO0oOO0ooo0 = xbmc . Player ( ) . getPlayingFile ( )
   if 14 - 14: i11i
   OOO0oOO0ooo0 = OOO0oOO0ooo0 . split ( '|User-Agent=' ) [ 0 ]
   oooo = { 'url' : OOO0oOO0ooo0 , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = oooo )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 42 - 42: i11i + I1i1iI1i - O00oOoOoO0o0O - O0 / IiIi11iIIi1Ii % Oo0ooO0oo0oO
def O00oO ( site_name , search_term = None ) :
 IIi = ''
 if os . path . exists ( oo0o0O00 ) == False or i11 . getSetting ( 'clearseachhistory' ) == 'true' :
  iIII1I1i1i ( oo0o0O00 , '' )
  i11 . setSetting ( "clearseachhistory" , "false" )
 if site_name == 'history' :
  OOOO0oo0 = Oo00OOOOoo0oo ( oo0o0O00 )
  Oo0O00Oo0o0 = re . compile ( '(.+?):(.*?)(?:\r|\n)' ) . findall ( OOOO0oo0 )
  if 83 - 83: IiIi11iIIi1Ii
  for O00O0oOO00O00 , search_term in Oo0O00Oo0o0 :
   if 'plugin://' in search_term :
    i1i ( search_term , O00O0oOO00O00 , IIi , '' , '' , '' , '' , '' , None , '' , total = int ( len ( Oo0O00Oo0o0 ) ) )
   else :
    oo0oooooO0 ( O00O0oOO00O00 + ':' + search_term , O00O0oOO00O00 , 26 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if not search_term :
  O0o0 = xbmc . Keyboard ( '' , 'Enter Search Term' )
  O0o0 . doModal ( )
  if ( O0o0 . isConfirmed ( ) == False ) :
   return
  search_term = O0o0 . getText ( )
  if len ( search_term ) == 0 :
   return
 search_term = search_term . replace ( ' ' , '+' )
 search_term = search_term . encode ( 'utf-8' )
 if 'youtube' in site_name :
  if 38 - 38: I1i1iI1i + OoooooooOO . i1IIi
  import _ytplist
  if 19 - 19: O0oo0OO0 - IiIi11iIIi1Ii - O00oOoOoO0o0O - oo000 . O0oo0OO0 . I1i1iI1i
  i11I1I = { }
  i11I1I = _ytplist . YoUTube ( 'searchYT' , youtube = search_term , max_page = 4 , nosave = 'nosave' )
  I11iiI1i1 = len ( i11I1I )
  for o0O0OOOOoOO0 in i11I1I :
   try :
    O00O0oOO00O00 = i11I1I [ o0O0OOOOoOO0 ] [ 'title' ]
    iI = i11I1I [ o0O0OOOOoOO0 ] [ 'date' ]
    try :
     oo0ooooo00o = i11I1I [ o0O0OOOOoOO0 ] [ 'desc' ]
    except Exception :
     oo0ooooo00o = 'UNAVAIABLE'
     if 78 - 78: iIii1I11I1II1 . IiIi11iIIi1Ii % iIii1I11I1II1 . O0 / Ii1I
    ii1ii11IIIiiI = 'plugin://plugin.video.youtube/play/?video_id=' + i11I1I [ o0O0OOOOoOO0 ] [ 'url' ]
    IIi = 'http://img.youtube.com/vi/' + i11I1I [ o0O0OOOOoOO0 ] [ 'url' ] + '/0.jpg'
    i1i ( ii1ii11IIIiiI , O00O0oOO00O00 , IIi , '' , '' , '' , '' , '' , None , '' , I11iiI1i1 )
   except Exception :
    OO ( 'This item is ignored::' )
  Oo0oOo000OoO0 = site_name + ':' + search_term + '\n'
  iIII1I1i1i ( os . path . join ( Oo0o0000o0o0 , 'history' ) , Oo0oOo000OoO0 , append = True )
 elif 'dmotion' in site_name :
  IIii1I1i = "https://api.dailymotion.com"
  if 22 - 22: IIiI1I11i11 % O0O - OoooooooOO * IIiI1I11i11
  import _DMsearch
  ii1i = str ( i11 . getSetting ( 'familyFilter' ) )
  _DMsearch . listVideos ( IIii1I1i + "/videos?fields=description,duration,id,owner.username,taken_time,thumbnail_large_url,title,views_total&search=" + search_term + "&sort=relevance&limit=100&family_filter=" + ii1i + "&localization=en_EN&page=1" )
  if 12 - 12: O00oOoOoO0o0O
  Oo0oOo000OoO0 = site_name + ':' + search_term + '\n'
  iIII1I1i1i ( os . path . join ( Oo0o0000o0o0 , 'history' ) , Oo0oOo000OoO0 , append = True )
 elif 'IMDBidplay' in site_name :
  IIii1I1i = "http://www.omdbapi.com/?t="
  ii1ii11IIIiiI = IIii1I1i + search_term
  if 71 - 71: oOooOoO0Oo0O . i11i . oOooOoO0Oo0O - II
  ooOO00oOo = dict ( headers = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' , 'Referer' : 'http://joker.org/' , 'Accept-Encoding' : 'gzip, deflate' , 'Content-Type' : 'application/json;charset=utf-8' , 'Accept' : 'application/json, text/plain, */*' } )
  if 45 - 45: Oo0ooO0oo0oO / O0 / oo000 * Ii1I
  OOOoO00 = requests . get ( ii1ii11IIIiiI , headers = ooOO00oOo )
  ii1I = OOOoO00 . json ( )
  IiIIiiI = ii1I [ 'Response' ]
  if IiIIiiI == 'True' :
   o0o0OO0o00o0O = ii1I [ 'imdbID' ]
   O00O0oOO00O00 = ii1I [ 'Title' ] + ii1I [ 'Released' ]
   o0OO00 = xbmcgui . Dialog ( )
   o0 = o0OO00 . yesno ( 'Check Movie Title' , 'PLAY :: %s ?' % O00O0oOO00O00 )
   if o0 :
    ii1ii11IIIiiI = 'plugin://plugin.video.pulsar/movie/' + o0o0OO0o00o0O + '/play'
    Oo0oOo000OoO0 = O00O0oOO00O00 + ':' + ii1ii11IIIiiI + '\n'
    iIII1I1i1i ( oo0o0O00 , Oo0oOo000OoO0 , append = True )
    return ii1ii11IIIiiI
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,No IMDB match found ,7000," + I1IiIiiIII + ")" )
   if 28 - 28: O0O - iiiiIi11i + oo000 + O00oOoOoO0o0O / iIii1I11I1II1
def iiiii11I1 ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def Ii1 ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def OOOoI1iI1IiI ( s ) : return "" . join ( filter ( lambda i1i1Ii1I : ord ( i1i1Ii1I ) < 128 , s ) )
if 11 - 11: Ii1I - oo000 - IiIi11iIIi1Ii * oo000 + II
def oooo0O0o0OoOO ( command ) :
 ii1I = ''
 try :
  ii1I = xbmc . executeJSONRPC ( Ii1 ( command ) )
 except UnicodeEncodeError :
  ii1I = xbmc . executeJSONRPC ( iiiii11I1 ( command ) )
  if 36 - 36: iiiiIi11i / I1i1iI1i - oOooOoO0Oo0O . oOooOoO0Oo0O
 return Ii1 ( ii1I )
 if 2 - 2: Oo0ooO0oo0oO + o0OOO
 if 91 - 91: o0OOO % II
def Ii11I1 ( ) :
 i1i1II1I = xbmc . getSkinDir ( )
 if i1i1II1I == 'skin.confluence' :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 elif i1i1II1I == 'skin.aeon.nox' :
  xbmc . executebuiltin ( 'Container.SetViewMode(511)' )
 else :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
  if 62 - 62: oo000 + O00oOoOoO0o0O * O0oo0OO0
  if 54 - 54: II . O0O
def I1iiIi1Ii1IIiI ( url ) :
 ooo00Oo00O0 = Ii1 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":["thumbnail","title","year","dateadded","fanart","rating","season","episode","studio"]},"id":1}' ) % url
 if 54 - 54: O0O % iiiiIi11i - IIiI1I11i11 - iIii1I11I1II1
 IIi1i = json . loads ( oooo0O0o0OoOO ( ooo00Oo00O0 ) )
 for Oo0O0OOOoo in IIi1i [ 'result' ] [ 'files' ] :
  url = Oo0O0OOOoo [ 'file' ]
  O00O0oOO00O00 = OOOoI1iI1IiI ( Oo0O0OOOoo [ 'label' ] )
  IIi = OOOoI1iI1IiI ( Oo0O0OOOoo [ 'thumbnail' ] )
  try :
   oOO00oOO = OOOoI1iI1IiI ( Oo0O0OOOoo [ 'fanart' ] )
  except Exception :
   oOO00oOO = ''
  try :
   iI = Oo0O0OOOoo [ 'year' ]
  except Exception :
   iI = ''
  try :
   iIiIIiii1II = Oo0O0OOOoo [ 'episode' ]
   Ii = Oo0O0OOOoo [ 'season' ]
   if iIiIIiii1II == - 1 or Ii == - 1 :
    oo0ooooo00o = ''
   else :
    oo0ooooo00o = '[COLOR yellow] S' + str ( Ii ) + '[/COLOR][COLOR hotpink] E' + str ( iIiIIiii1II ) + '[/COLOR]'
  except Exception :
   oo0ooooo00o = ''
  try :
   iIi11Ii1iI1 = Oo0O0OOOoo [ 'studio' ]
   if iIi11Ii1iI1 :
    oo0ooooo00o += '\n Studio:[COLOR steelblue] ' + iIi11Ii1iI1 [ 0 ] + '[/COLOR]'
  except Exception :
   iIi11Ii1iI1 = ''
   if 91 - 91: Ii1I + I1i1iI1i . iii1I1I
  if Oo0O0OOOoo [ 'filetype' ] == 'file' :
   i1i ( url , O00O0oOO00O00 , IIi , oOO00oOO , oo0ooooo00o , '' , iI , '' , None , '' , total = len ( IIi1i [ 'result' ] [ 'files' ] ) )
   if 15 - 15: iii1I1I
   if 94 - 94: I1i1iI1i % i11i * i1IIi * iIii1I11I1II1
  else :
   oo0oooooO0 ( O00O0oOO00O00 , url , 53 , IIi , oOO00oOO , oo0ooooo00o , '' , iI , '' )
   if 81 - 81: IIiI1I11i11 - iii1I1I
   if 24 - 24: OoooooooOO . O0O * i11i
def i1i ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" ) :
 if 59 - 59: I1i1iI1i + O0O / Ii1I
 iIIiI11i1I11 = [ ]
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 OOO = True
 if 97 - 97: IIiI1I11i11 * O0oo0OO0 % II . O0oo0OO0 - I1i1iI1i - Ii1I
 if regexs :
  oo0O0o00 = '17'
  if 39 - 39: II + O0 / i1IIi % Oo0ooO0oo0oO / iiiiIi11i * Oo0ooO0oo0oO
  iIIiI11i1I11 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif any ( x in url for x in IiiIII111iI ) and url . startswith ( 'http' ) :
  oo0O0o00 = '19'
  if 77 - 77: Oo0ooO0oo0oO . I1i1iI1i % oo000
  iIIiI11i1I11 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  oo0O0o00 = '18'
  if 42 - 42: Oo0ooO0oo0oO % O0oo0OO0 % IiIi11iIIi1Ii % iiiiIi11i + iii1I1I % oo000
  iIIiI11i1I11 . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if i11 . getSetting ( 'dlaudioonly' ) == 'true' :
   iIIiI11i1I11 . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) or '.torrent' in url :
  if 3 - 3: iiiiIi11i
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  oo0O0o00 = '12'
  if 64 - 64: O0O . oOooOoO0Oo0O - OoooooooOO . II - O0oo0OO0
 else :
  oo0O0o00 = '12'
  if 77 - 77: O00oOoOoO0o0O % oo000 / i11i % O0oo0OO0 % OoooooooOO % O0O
  iIIiI11i1I11 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 oooOO0oOooO00 = sys . argv [ 0 ] + "?"
 I1i11II11i1iI = False
 if 43 - 43: IIiI1I11i11 . I1i1iI1i
 if playlist :
  if i11 . getSetting ( 'add_playlist' ) == "false" :
   oooOO0oOooO00 += "url=" + urllib . quote_plus ( url ) + "&mode=" + oo0O0o00
  else :
   oooOO0oOooO00 += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   I1i11II11i1iI = True
 else :
  oooOO0oOooO00 += "url=" + urllib . quote_plus ( url ) + "&mode=" + oo0O0o00
 if regexs :
  oooOO0oOooO00 += "&regexs=" + regexs
 if not setCookie == '' :
  oooOO0oOooO00 += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 12 - 12: I1i1iI1i + Ii1I + iii1I1I . Oo0ooO0oo0oO / O00oOoOoO0o0O
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 ooO0O00Oo0o = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 ooO0O00Oo0o . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 ooO0O00Oo0o . setProperty ( "Fanart_Image" , fanart )
 if 29 - 29: Oo0ooO0oo0oO . II - i11i
 if ( not I1i11II11i1iI ) and not any ( x in url for x in Oo ) :
  if regexs :
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) :
    if 68 - 68: iIii1I11I1II1 + i11i / iiiiIi11i
    ooO0O00Oo0o . setProperty ( 'IsPlayable' , 'true' )
  else :
   ooO0O00Oo0o . setProperty ( 'IsPlayable' , 'true' )
 else :
  OO ( 'NOT setting isplayable' + url )
  if 91 - 91: oo000 % iIii1I11I1II1 . oOooOoO0Oo0O
 if showcontext :
  iIIiI11i1I11 = [ ]
  if showcontext == 'fav' :
   iIIiI11i1I11 . append (
 ( 'Remove from Falcon Movies Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in I1I11I1I1I :
   O00ooooo00 = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   if playlist :
    O00ooooo00 += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    O00ooooo00 += "&regexs=" + regexs
   iIIiI11i1I11 . append ( ( 'Add to Falcon Movies Favorites' , 'XBMC.RunPlugin(%s)' % O00ooooo00 ) )
  ooO0O00Oo0o . addContextMenuItems ( iIIiI11i1I11 )
  if 94 - 94: iii1I1I - i11i . oOooOoO0Oo0O - IIiI1I11i11 + o0OOO * o0OOO
 if not playlist is None :
  if i11 . getSetting ( 'add_playlist' ) == "false" :
   I1iiIiiii1111 = name . split ( ') ' ) [ 1 ]
   I1ii1i11i = [
 ( 'Play ' + I1iiIiiii1111 + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( I1iiIiiii1111 ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   ooO0O00Oo0o . addContextMenuItems ( I1ii1i11i )
   if 86 - 86: O0 % i1IIi . i11i . iii1I1I
   if 44 - 44: i11iIiiIii * iii1I1I + oo000 + Oo0ooO0oo0oO * O0 . Oo0ooO0oo0oO
 OOO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oooOO0oOooO00 , listitem = ooO0O00Oo0o , totalItems = total )
 if 19 - 19: i11i - Oo0ooO0oo0oO
 return OOO
 if 59 - 59: IiIi11iIIi1Ii * O0O - O00oOoOoO0o0O . Ii1I
def o0OO00oo0O ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  ooO0O00Oo0o = xbmcgui . ListItem ( name , iconImage = iconimage )
  ooO0O00Oo0o . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  ooO0O00Oo0o . setProperty ( "IsPlayable" , "true" )
  ooO0O00Oo0o . setPath ( str ( url ) )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , ooO0O00Oo0o )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 46 - 46: i11iIiiIii - Ii1I * oOooOoO0Oo0O * iii1I1I % o0OOO * i1IIi
  if 5 - 5: O0 / II . IIiI1I11i11 + OoooooooOO
  if 97 - 97: Oo0ooO0oo0oO . O00oOoOoO0o0O . O00oOoOoO0o0O / iIii1I11I1II1 - O0O + O0oo0OO0
  if 32 - 32: Ii1I . IiIi11iIIi1Ii % Oo0ooO0oo0oO + o0OOO + O0O
def OooOo0oo0O0o00O ( link ) :
 ii1ii11IIIiiI = urllib . urlopen ( link )
 OOOoOOo0o = ii1ii11IIIiiI . read ( )
 ii1ii11IIIiiI . close ( )
 IiI1Iii1 = OOOoOOo0o . split ( "Jetzt" )
 Ooooo = IiI1Iii1 [ 1 ] . split ( 'programm/detail.php?const_id=' )
 iIiiiIiIi = Ooooo [ 1 ] . split ( '<br /><a href="/' )
 i1I1Ii11i = iIiiiIiIi [ 0 ] [ 40 : len ( iIiiiIiIi [ 0 ] ) ]
 I1iIiiiI1 = Ooooo [ 2 ] . split ( "</a></p></div>" )
 OOO0O00Oo = I1iIiiiI1 [ 0 ] [ 17 : len ( I1iIiiiI1 [ 0 ] ) ]
 OOO0O00Oo = OOO0O00Oo . encode ( 'utf-8' )
 return "  - " + OOO0O00Oo + " - " + i1I1Ii11i
 if 13 - 13: iIii1I11I1II1
 if 2 - 2: i1IIi * iiiiIi11i - iiiiIi11i + OoooooooOO % oo000 / oo000
def I1i111I ( url , regex ) :
 ii1I = oOoO ( url )
 try :
  o0O0OOOOoOO0 = re . findall ( regex , ii1I ) [ 0 ]
  return o0O0OOOOoOO0
 except :
  OO ( 'regex failed' )
  OO ( regex )
  return
  if 3 - 3: OoooooooOO
  if 71 - 71: Oo0ooO0oo0oO + i1IIi - O0oo0OO0 - i11iIiiIii . iii1I1I - II
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 85 - 85: o0OOO - oo000 / o0OOO + Ii1I - O0oo0OO0
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 49 - 49: O0O - O0 / O0O * oo000 + I1i1iI1i
OoOoO0O = I1Ii11II1I1 ( )
if 35 - 35: i11i . oOooOoO0Oo0O / i1IIi / oOooOoO0Oo0O * iiiiIi11i
ii1ii11IIIiiI = None
O00O0oOO00O00 = None
oo0O0o00 = None
O0O0O0Oo = None
OOOO = None
oOO00oOO = iI11
O0O0O0Oo = None
Oo0O0000Oo00o = None
O00o0OO0 = None
if 20 - 20: O0O . oOooOoO0Oo0O * i11iIiiIii / i11iIiiIii
try :
 ii1ii11IIIiiI = urllib . unquote_plus ( OoOoO0O [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 O00O0oOO00O00 = urllib . unquote_plus ( OoOoO0O [ "name" ] )
except :
 pass
try :
 OOOO = urllib . unquote_plus ( OoOoO0O [ "iconimage" ] )
except :
 pass
try :
 oOO00oOO = urllib . unquote_plus ( OoOoO0O [ "fanart" ] )
except :
 pass
try :
 oo0O0o00 = int ( OoOoO0O [ "mode" ] )
except :
 pass
try :
 O0O0O0Oo = eval ( urllib . unquote_plus ( OoOoO0O [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 Oo0O0000Oo00o = int ( OoOoO0O [ "fav_mode" ] )
except :
 pass
try :
 O00o0OO0 = OoOoO0O [ "regexs" ]
except :
 pass
 if 89 - 89: O0oo0OO0 . i11iIiiIii * O0
OO ( "Mode: " + str ( oo0O0o00 ) )
if not ii1ii11IIIiiI is None :
 OO ( "URL: " + str ( ii1ii11IIIiiI . encode ( 'utf-8' ) ) )
OO ( "Name: " + str ( O00O0oOO00O00 ) )
if 44 - 44: i1IIi . oOooOoO0Oo0O / i11iIiiIii + Oo0ooO0oo0oO
if oo0O0o00 == None :
 OO ( "Index" )
 oo ( )
 if 27 - 27: Ii1I
elif oo0O0o00 == 1 :
 OO ( "getData" )
 O0o0Oo ( ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 52 - 52: I1i1iI1i % oo000 + iIii1I11I1II1 * iiiiIi11i . O00oOoOoO0o0O
elif oo0O0o00 == 2 :
 OO ( "getChannelItems" )
 OoO0OOOOo0O ( O00O0oOO00O00 , ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 95 - 95: iIii1I11I1II1 . Oo0ooO0oo0oO - OoooooooOO * O0O / IiIi11iIIi1Ii
elif oo0O0o00 == 3 :
 OO ( "getSubChannelItems" )
 OO0O000 ( O00O0oOO00O00 , ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 74 - 74: iiiiIi11i
elif oo0O0o00 == 4 :
 OO ( "getFavorites" )
 iI1iIiiiI1I1 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 34 - 34: O0oo0OO0
elif oo0O0o00 == 5 :
 OO ( "addFavorite" )
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '  - ' ) [ 0 ]
 except :
  pass
 iiIiII11i1 ( O00O0oOO00O00 , ii1ii11IIIiiI , OOOO , oOO00oOO , Oo0O0000Oo00o )
 if 44 - 44: i1IIi % oOooOoO0Oo0O % IiIi11iIIi1Ii
elif oo0O0o00 == 6 :
 OO ( "rmFavorite" )
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '  - ' ) [ 0 ]
 except :
  pass
 iii1IiI1I1 ( O00O0oOO00O00 )
 if 9 - 9: IIiI1I11i11 % OoooooooOO - O00oOoOoO0o0O
elif oo0O0o00 == 7 :
 OO ( "addSource" )
 O0oo0OO0oOOOo ( ii1ii11IIIiiI )
 if 43 - 43: O0O % O0O
elif oo0O0o00 == 8 :
 OO ( "rmSource" )
 iII ( O00O0oOO00O00 )
 if 46 - 46: IIiI1I11i11 % iIii1I11I1II1 . O0oo0OO0 . O0 * II / OoooooooOO
elif oo0O0o00 == 9 :
 OO ( "download_file" )
 iii11i1 ( O00O0oOO00O00 , ii1ii11IIIiiI )
 if 7 - 7: iiiiIi11i - O0 * iii1I1I - IiIi11iIIi1Ii - i11i
elif oo0O0o00 == 10 :
 OO ( "getCommunitySources" )
 I11OoOoOOOoOO ( )
 if 41 - 41: oOooOoO0Oo0O - I1i1iI1i % i11i . I1i1iI1i - iii1I1I
elif oo0O0o00 == 11 :
 OO ( "addSource" )
 O0oo0OO0oOOOo ( ii1ii11IIIiiI )
 if 45 - 45: O00oOoOoO0o0O - Ii1I
elif oo0O0o00 == 12 :
 OO ( "setResolvedUrl" )
 if not ii1ii11IIIiiI . startswith ( "plugin://plugin" ) or not any ( x in ii1ii11IIIiiI for x in Oo ) :
  o0O0OOOOoOO0 = xbmcgui . ListItem ( path = ii1ii11IIIiiI )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , o0O0OOOOoOO0 )
 else :
  print 'Not setting setResolvedUrl'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + ii1ii11IIIiiI + ')' )
  if 70 - 70: O0O % oOooOoO0Oo0O / oOooOoO0Oo0O . iii1I1I % II . i11i
  if 10 - 10: O00oOoOoO0o0O - i11iIiiIii . o0OOO % i1IIi
elif oo0O0o00 == 13 :
 OO ( "play_playlist" )
 I11o0000o0Oo ( O00O0oOO00O00 , O0O0O0Oo )
 if 78 - 78: iIii1I11I1II1 * IIiI1I11i11 . IIiI1I11i11 - Ii1I . iIii1I11I1II1
elif oo0O0o00 == 14 :
 OO ( "get_xml_database" )
 iIii ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 30 - 30: II + II % Oo0ooO0oo0oO - IiIi11iIIi1Ii - o0OOO
elif oo0O0o00 == 15 :
 OO ( "browse_xml_database" )
 iIii ( ii1ii11IIIiiI , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 36 - 36: iii1I1I % Ii1I
elif oo0O0o00 == 16 :
 OO ( "browse_community" )
 I11OoOoOOOoOO ( True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 72 - 72: oOooOoO0Oo0O / O0oo0OO0 - O0 + iii1I1I
elif oo0O0o00 == 17 :
 OO ( "getRegexParsed" )
 ii1ii11IIIiiI , I1I1i = I11i1II ( O00o0OO0 , ii1ii11IIIiiI )
 if ii1ii11IIIiiI :
  o0OO00oo0O ( ii1ii11IIIiiI , O00O0oOO00O00 , OOOO , I1I1i )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,Failed to extract regex. - " + "this" + ",4000," + I1IiIiiIII + ")" )
elif oo0O0o00 == 18 :
 OO ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Falcon Movies,Please [COLOR blue]install Youtube-dl[/COLOR] module ,10000," ")" )
 oOO0O00oO0Ooo = youtubedl . single_YD ( ii1ii11IIIiiI )
 o0OO00oo0O ( oOO0O00oO0Ooo , O00O0oOO00O00 , OOOO )
elif oo0O0o00 == 19 :
 OO ( "Genesiscommonresolvers" )
 o0OO00oo0O ( Oo0o00OO0000 ( ii1ii11IIIiiI ) , O00O0oOO00O00 , OOOO , True )
 if 83 - 83: O0
elif oo0O0o00 == 21 :
 OO ( "download current file using youtube-dl service" )
 o0OO00iIi11i ( '' , O00O0oOO00O00 , 'video' )
elif oo0O0o00 == 23 :
 OO ( "get info then download" )
 o0OO00iIi11i ( ii1ii11IIIiiI , O00O0oOO00O00 , 'video' )
elif oo0O0o00 == 24 :
 OO ( "Audio only youtube download" )
 o0OO00iIi11i ( ii1ii11IIIiiI , O00O0oOO00O00 , 'audio' )
elif oo0O0o00 == 25 :
 OO ( "YouTube/DMotion" )
 O00oO ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif oo0O0o00 == 26 :
 OO ( "YouTube/DMotion From Search History" )
 O00O0oOO00O00 = O00O0oOO00O00 . split ( ':' )
 O00oO ( ii1ii11IIIiiI , search_term = O00O0oOO00O00 [ 1 ] )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif oo0O0o00 == 27 :
 OO ( "Using IMDB id to play in Pulsar" )
 oOOOOOo = O00oO ( ii1ii11IIIiiI )
 xbmc . Player ( ) . play ( oOOOOOo )
elif oo0O0o00 == 30 :
 OoiIIiIi1 ( O00O0oOO00O00 , ii1ii11IIIiiI , OOOO , oOO00oOO )
 if 50 - 50: I1i1iI1i + II + O0oo0OO0
elif oo0O0o00 == 40 :
 SearchChannels ( )
 Ii11I1 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 15 - 15: iii1I1I
elif oo0O0o00 == 41 :
 Ii1iIiII1ii1 ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 13 - 13: iIii1I11I1II1 * oo000 / I1i1iI1i % II + iiiiIi11i
elif oo0O0o00 == 53 :
 OO ( "Requesting JSON-RPC Items" )
 I1iiIi1Ii1IIiI ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')